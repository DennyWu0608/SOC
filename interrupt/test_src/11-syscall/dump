
os.elf:     file format elf32-littleriscv


Disassembly of section .text:

00000000 <_start>:
	.global	_start

	.text
_start:
	# park harts with id != 0
	csrr	t0, mhartid		# read current hart id
       0:	f14022f3          	csrr	t0,mhartid
	mv	tp, t0			# keep CPU's hartid in its tp for later usage.
       4:	00028213          	mv	tp,t0
	bnez	t0, park		# if we're not on the hart 0
       8:	04029c63          	bnez	t0,60 <park>
					# we park the hart

	# Set all bytes in the BSS section to zero.
	la	a0, _bss_start
       c:	00003517          	auipc	a0,0x3
      10:	ff850513          	addi	a0,a0,-8 # 3004 <out_buf>
	la	a1, _bss_end
      14:	00006597          	auipc	a1,0x6
      18:	0ec58593          	addi	a1,a1,236 # 6100 <_bss_end>
	bgeu	a0, a1, 2f
      1c:	00b57863          	bgeu	a0,a1,2c <_start+0x2c>
1:
	sw	zero, (a0)
      20:	00052023          	sw	zero,0(a0)
	addi	a0, a0, 4
      24:	00450513          	addi	a0,a0,4
	bltu	a0, a1, 1b
      28:	feb56ce3          	bltu	a0,a1,20 <_start+0x20>
2:
	# Setup stacks, the stack grows from bottom to top, so we put the
	# stack pointer to the very end of the stack range.
	slli	t0, t0, 10		# shift left the hart id by 1024
      2c:	00a29293          	slli	t0,t0,0xa
	la	sp, stacks + STACK_SIZE	# set the initial stack pointer
      30:	00000117          	auipc	sp,0x0
      34:	43810113          	addi	sp,sp,1080 # 468 <STACK_SIZE+0x68>
					# to the end of the first stack space
	add	sp, sp, t0		# move the current hart stack pointer
      38:	00510133          	add	sp,sp,t0
	# been rootcaused till now. Details please refer to
	# https://gitlab.com/qemu-project/qemu/-/issues/585 or
	# https://gitee.com/unicornx/riscv-operating-system-mooc/issues/I441IC (in chinese)
	# So it's just a temporary workaround till now to not block people who
	# want to try newer qemu (>= 6.0).
	li      t0, 0xffffffff
      3c:	fff00293          	li	t0,-1
	csrw    pmpaddr0, t0
      40:	3b029073          	csrw	pmpaddr0,t0
	li      t0, 0xf
      44:	00f00293          	li	t0,15
	csrw    pmpcfg0, t0
      48:	3a029073          	csrw	pmpcfg0,t0
	# to the first task, so we parepare the mstatus here.
	# Notice: default mstatus is 0
#ifdef CONFIG_SYSCALL
	# Keep mstatus.MPP as 0, so we will run in User mode after MRET.
	# Set mstatus.MPIE to 1, so MRET will enable the interrupt.
	li	t0, 1 << 7
      4c:	08000293          	li	t0,128
#else
	# Set mstatus.MPP to 3, so we still run in Machine mode after MRET.
	# Set mstatus.MPIE to 1, so MRET will enable the interrupt.
	li	t0, 3 << 11 | 1 << 7
#endif
	csrr	a1, mstatus
      50:	300025f3          	csrr	a1,mstatus
	or	t0, t0, a1
      54:	00b2e2b3          	or	t0,t0,a1
	csrw	mstatus, t0
      58:	30029073          	csrw	mstatus,t0

	j	start_kernel		# hart 0 jump to c
      5c:	5e80006f          	j	644 <start_kernel>

00000060 <park>:

park:
	wfi
      60:	10500073          	wfi
	j	park
      64:	ffdff06f          	j	60 <park>

00000068 <stacks>:
	...

00000470 <trap_vector>:
.globl trap_vector
# the trap vector base address must always be aligned on a 4-byte boundary
.align 4
trap_vector:
	# save context(registers).
	csrrw	t6, mscratch, t6	# swap t6 and mscratch
     470:	340f9ff3          	csrrw	t6,mscratch,t6
	reg_save t6
     474:	001fa023          	sw	ra,0(t6)
     478:	002fa223          	sw	sp,4(t6)
     47c:	003fa423          	sw	gp,8(t6)
     480:	004fa623          	sw	tp,12(t6)
     484:	005fa823          	sw	t0,16(t6)
     488:	006faa23          	sw	t1,20(t6)
     48c:	007fac23          	sw	t2,24(t6)
     490:	008fae23          	sw	s0,28(t6)
     494:	029fa023          	sw	s1,32(t6)
     498:	02afa223          	sw	a0,36(t6)
     49c:	02bfa423          	sw	a1,40(t6)
     4a0:	02cfa623          	sw	a2,44(t6)
     4a4:	02dfa823          	sw	a3,48(t6)
     4a8:	02efaa23          	sw	a4,52(t6)
     4ac:	02ffac23          	sw	a5,56(t6)
     4b0:	030fae23          	sw	a6,60(t6)
     4b4:	051fa023          	sw	a7,64(t6)
     4b8:	052fa223          	sw	s2,68(t6)
     4bc:	053fa423          	sw	s3,72(t6)
     4c0:	054fa623          	sw	s4,76(t6)
     4c4:	055fa823          	sw	s5,80(t6)
     4c8:	056faa23          	sw	s6,84(t6)
     4cc:	057fac23          	sw	s7,88(t6)
     4d0:	058fae23          	sw	s8,92(t6)
     4d4:	079fa023          	sw	s9,96(t6)
     4d8:	07afa223          	sw	s10,100(t6)
     4dc:	07bfa423          	sw	s11,104(t6)
     4e0:	07cfa623          	sw	t3,108(t6)
     4e4:	07dfa823          	sw	t4,112(t6)
     4e8:	07efaa23          	sw	t5,116(t6)

	# Save the actual t6 register, which we swapped into
	# mscratch
	mv	t5, t6		# t5 points to the context of current task
     4ec:	000f8f13          	mv	t5,t6
	csrr	t6, mscratch	# read t6 back from mscratch
     4f0:	34002ff3          	csrr	t6,mscratch
	sw	t6, 120(t5)	# save t6 with t5 as base
     4f4:	07ff2c23          	sw	t6,120(t5)

	# save mepc to context of current task
	csrr	a0, mepc
     4f8:	34102573          	csrr	a0,mepc
	sw	a0, 124(t5)
     4fc:	06af2e23          	sw	a0,124(t5)

	# Restore the context pointer into mscratch
	csrw	mscratch, t5
     500:	340f1073          	csrw	mscratch,t5

	# call the C trap handler in trap.c
	csrr	a0, mepc
     504:	34102573          	csrr	a0,mepc
	csrr	a1, mcause
     508:	342025f3          	csrr	a1,mcause
	csrr	a2, mscratch
     50c:	34002673          	csrr	a2,mscratch
	call	trap_handler
     510:	290010ef          	jal	ra,17a0 <trap_handler>

	# trap_handler will return the return address via a0.
	csrw	mepc, a0
     514:	34151073          	csrw	mepc,a0

	# restore context(registers).
	csrr	t6, mscratch
     518:	34002ff3          	csrr	t6,mscratch
	reg_restore t6
     51c:	000fa083          	lw	ra,0(t6)
     520:	004fa103          	lw	sp,4(t6)
     524:	008fa183          	lw	gp,8(t6)
     528:	00cfa203          	lw	tp,12(t6)
     52c:	010fa283          	lw	t0,16(t6)
     530:	014fa303          	lw	t1,20(t6)
     534:	018fa383          	lw	t2,24(t6)
     538:	01cfa403          	lw	s0,28(t6)
     53c:	020fa483          	lw	s1,32(t6)
     540:	024fa503          	lw	a0,36(t6)
     544:	028fa583          	lw	a1,40(t6)
     548:	02cfa603          	lw	a2,44(t6)
     54c:	030fa683          	lw	a3,48(t6)
     550:	034fa703          	lw	a4,52(t6)
     554:	038fa783          	lw	a5,56(t6)
     558:	03cfa803          	lw	a6,60(t6)
     55c:	040fa883          	lw	a7,64(t6)
     560:	044fa903          	lw	s2,68(t6)
     564:	048fa983          	lw	s3,72(t6)
     568:	04cfaa03          	lw	s4,76(t6)
     56c:	050faa83          	lw	s5,80(t6)
     570:	054fab03          	lw	s6,84(t6)
     574:	058fab83          	lw	s7,88(t6)
     578:	05cfac03          	lw	s8,92(t6)
     57c:	060fac83          	lw	s9,96(t6)
     580:	064fad03          	lw	s10,100(t6)
     584:	068fad83          	lw	s11,104(t6)
     588:	06cfae03          	lw	t3,108(t6)
     58c:	070fae83          	lw	t4,112(t6)
     590:	074faf03          	lw	t5,116(t6)
     594:	078faf83          	lw	t6,120(t6)

	# return to whatever we were doing before trap.
	mret
     598:	30200073          	mret
     59c:	00000013          	nop

000005a0 <switch_to>:
# a0: pointer to the context of the next task
.globl switch_to
.align 4
switch_to:
	# switch mscratch to point to the context of the next task
	csrw	mscratch, a0
     5a0:	34051073          	csrw	mscratch,a0
	# set mepc to the pc of the next task
	lw	a1, 124(a0)
     5a4:	07c52583          	lw	a1,124(a0)
	csrw	mepc, a1
     5a8:	34159073          	csrw	mepc,a1

	# Restore all GP registers
	# Use t6 to point to the context of the new task
	mv	t6, a0
     5ac:	00050f93          	mv	t6,a0
	reg_restore t6
     5b0:	000fa083          	lw	ra,0(t6)
     5b4:	004fa103          	lw	sp,4(t6)
     5b8:	008fa183          	lw	gp,8(t6)
     5bc:	00cfa203          	lw	tp,12(t6)
     5c0:	010fa283          	lw	t0,16(t6)
     5c4:	014fa303          	lw	t1,20(t6)
     5c8:	018fa383          	lw	t2,24(t6)
     5cc:	01cfa403          	lw	s0,28(t6)
     5d0:	020fa483          	lw	s1,32(t6)
     5d4:	024fa503          	lw	a0,36(t6)
     5d8:	028fa583          	lw	a1,40(t6)
     5dc:	02cfa603          	lw	a2,44(t6)
     5e0:	030fa683          	lw	a3,48(t6)
     5e4:	034fa703          	lw	a4,52(t6)
     5e8:	038fa783          	lw	a5,56(t6)
     5ec:	03cfa803          	lw	a6,60(t6)
     5f0:	040fa883          	lw	a7,64(t6)
     5f4:	044fa903          	lw	s2,68(t6)
     5f8:	048fa983          	lw	s3,72(t6)
     5fc:	04cfaa03          	lw	s4,76(t6)
     600:	050faa83          	lw	s5,80(t6)
     604:	054fab03          	lw	s6,84(t6)
     608:	058fab83          	lw	s7,88(t6)
     60c:	05cfac03          	lw	s8,92(t6)
     610:	060fac83          	lw	s9,96(t6)
     614:	064fad03          	lw	s10,100(t6)
     618:	068fad83          	lw	s11,104(t6)
     61c:	06cfae03          	lw	t3,108(t6)
     620:	070fae83          	lw	t4,112(t6)
     624:	074faf03          	lw	t5,116(t6)
     628:	078faf83          	lw	t6,120(t6)

	# Do actual context switching.
	# Notice this will enable global interrupt
	mret
     62c:	30200073          	mret
	...

00000638 <gethid>:
#include "syscall.h"

.global gethid
gethid:
	li a7, SYS_gethid
     638:	00100893          	li	a7,1
	ecall
     63c:	00000073          	ecall
	ret
     640:	00008067          	ret

00000644 <start_kernel>:
extern void os_main(void);
extern void trap_init(void);
extern void timer_init(void);

void start_kernel(void)
{
     644:	ff010113          	addi	sp,sp,-16
     648:	00112623          	sw	ra,12(sp)
     64c:	00812423          	sw	s0,8(sp)
     650:	01010413          	addi	s0,sp,16
	uart_init();
     654:	03c000ef          	jal	ra,690 <uart_init>
	uart_puts("Hello, RVOS!\n");
     658:	000027b7          	lui	a5,0x2
     65c:	cec78513          	addi	a0,a5,-788 # 1cec <BSS_END+0x4>
     660:	088000ef          	jal	ra,6e8 <uart_puts>

	page_init();
     664:	079000ef          	jal	ra,edc <page_init>

	trap_init();
     668:	0ec010ef          	jal	ra,1754 <trap_init>

	timer_init();
     66c:	3d0010ef          	jal	ra,1a3c <timer_init>

	sched_init();
     670:	551000ef          	jal	ra,13c0 <sched_init>

	os_main();
     674:	060010ef          	jal	ra,16d4 <os_main>

	schedule();
     678:	589000ef          	jal	ra,1400 <schedule>

	uart_puts("Would not go here!\n");
     67c:	000027b7          	lui	a5,0x2
     680:	cfc78513          	addi	a0,a5,-772 # 1cfc <BSS_END+0x14>
     684:	064000ef          	jal	ra,6e8 <uart_puts>
	while (1) {}; // stop here!
     688:	00000013          	nop
     68c:	ffdff06f          	j	688 <start_kernel+0x44>

00000690 <uart_init>:
#include "os.h"

void uart_init()
{
     690:	ff010113          	addi	sp,sp,-16
     694:	00812623          	sw	s0,12(sp)
     698:	01010413          	addi	s0,sp,16

}
     69c:	00000013          	nop
     6a0:	00c12403          	lw	s0,12(sp)
     6a4:	01010113          	addi	sp,sp,16
     6a8:	00008067          	ret

000006ac <uart_putc>:

int uart_putc(char ch)
{
     6ac:	fe010113          	addi	sp,sp,-32
     6b0:	00112e23          	sw	ra,28(sp)
     6b4:	00812c23          	sw	s0,24(sp)
     6b8:	02010413          	addi	s0,sp,32
     6bc:	00050793          	mv	a5,a0
     6c0:	fef407a3          	sb	a5,-17(s0)
	put_char(ch);
     6c4:	fef44783          	lbu	a5,-17(s0)
     6c8:	00078513          	mv	a0,a5
     6cc:	04c000ef          	jal	ra,718 <put_char>
	return ch;
     6d0:	fef44783          	lbu	a5,-17(s0)
}
     6d4:	00078513          	mv	a0,a5
     6d8:	01c12083          	lw	ra,28(sp)
     6dc:	01812403          	lw	s0,24(sp)
     6e0:	02010113          	addi	sp,sp,32
     6e4:	00008067          	ret

000006e8 <uart_puts>:

void uart_puts(char *s)
{
     6e8:	fe010113          	addi	sp,sp,-32
     6ec:	00112e23          	sw	ra,28(sp)
     6f0:	00812c23          	sw	s0,24(sp)
     6f4:	02010413          	addi	s0,sp,32
     6f8:	fea42623          	sw	a0,-20(s0)
	put_str(s);
     6fc:	fec42503          	lw	a0,-20(s0)
     700:	04c000ef          	jal	ra,74c <put_str>
}
     704:	00000013          	nop
     708:	01c12083          	lw	ra,28(sp)
     70c:	01812403          	lw	s0,24(sp)
     710:	02010113          	addi	sp,sp,32
     714:	00008067          	ret

00000718 <put_char>:

/*----------------------------------------------*/
/* Put a character                              */
/*----------------------------------------------*/
void put_char(char c) 
{
     718:	fe010113          	addi	sp,sp,-32
     71c:	00812e23          	sw	s0,28(sp)
     720:	02010413          	addi	s0,sp,32
     724:	00050793          	mv	a5,a0
     728:	fef407a3          	sb	a5,-17(s0)
  DEV_WRITE(CTRL_BASE + CTRL_OUT, (unsigned char)c);
     72c:	002007b7          	lui	a5,0x200
     730:	00478793          	addi	a5,a5,4 # 200004 <_memory_end+0x4>
     734:	fef44703          	lbu	a4,-17(s0)
     738:	00e7a023          	sw	a4,0(a5)
}
     73c:	00000013          	nop
     740:	01c12403          	lw	s0,28(sp)
     744:	02010113          	addi	sp,sp,32
     748:	00008067          	ret

0000074c <put_str>:

void put_str(const char *str) 
{
     74c:	fe010113          	addi	sp,sp,-32
     750:	00112e23          	sw	ra,28(sp)
     754:	00812c23          	sw	s0,24(sp)
     758:	02010413          	addi	s0,sp,32
     75c:	fea42623          	sw	a0,-20(s0)
  while (*str) 
     760:	01c0006f          	j	77c <put_str+0x30>
  {
    put_char(*str++);
     764:	fec42783          	lw	a5,-20(s0)
     768:	00178713          	addi	a4,a5,1
     76c:	fee42623          	sw	a4,-20(s0)
     770:	0007c783          	lbu	a5,0(a5)
     774:	00078513          	mv	a0,a5
     778:	fa1ff0ef          	jal	ra,718 <put_char>
  while (*str) 
     77c:	fec42783          	lw	a5,-20(s0)
     780:	0007c783          	lbu	a5,0(a5)
     784:	fe0790e3          	bnez	a5,764 <put_str+0x18>
  }
}
     788:	00000013          	nop
     78c:	00000013          	nop
     790:	01c12083          	lw	ra,28(sp)
     794:	01812403          	lw	s0,24(sp)
     798:	02010113          	addi	sp,sp,32
     79c:	00008067          	ret

000007a0 <halt>:

void halt() 
{ 
     7a0:	ff010113          	addi	sp,sp,-16
     7a4:	00812623          	sw	s0,12(sp)
     7a8:	01010413          	addi	s0,sp,16
  DEV_WRITE(CTRL_BASE + CTRL_CTRL, 1); 
     7ac:	002007b7          	lui	a5,0x200
     7b0:	00878793          	addi	a5,a5,8 # 200008 <_memory_end+0x8>
     7b4:	00100713          	li	a4,1
     7b8:	00e7a023          	sw	a4,0(a5)
     7bc:	00000013          	nop
     7c0:	00c12403          	lw	s0,12(sp)
     7c4:	01010113          	addi	sp,sp,16
     7c8:	00008067          	ret

000007cc <_vsnprintf>:
/*
 * ref: https://github.com/cccriscv/mini-riscv-os/blob/master/05-Preemptive/lib.c
 */

static int _vsnprintf(char * out, size_t n, const char* s, va_list vl)
{
     7cc:	fb010113          	addi	sp,sp,-80
     7d0:	04812623          	sw	s0,76(sp)
     7d4:	05010413          	addi	s0,sp,80
     7d8:	faa42e23          	sw	a0,-68(s0)
     7dc:	fab42c23          	sw	a1,-72(s0)
     7e0:	fac42a23          	sw	a2,-76(s0)
     7e4:	fad42823          	sw	a3,-80(s0)
	int format = 0;
     7e8:	fe042623          	sw	zero,-20(s0)
	int longarg = 0;
     7ec:	fe042423          	sw	zero,-24(s0)
	size_t pos = 0;
     7f0:	fe042223          	sw	zero,-28(s0)
	for (; *s; s++) {
     7f4:	4080006f          	j	bfc <_vsnprintf+0x430>
		if (format) {
     7f8:	fec42783          	lw	a5,-20(s0)
     7fc:	38078c63          	beqz	a5,b94 <_vsnprintf+0x3c8>
			switch(*s) {
     800:	fb442783          	lw	a5,-76(s0)
     804:	0007c783          	lbu	a5,0(a5)
     808:	f9d78793          	addi	a5,a5,-99
     80c:	01500713          	li	a4,21
     810:	3cf76e63          	bltu	a4,a5,bec <_vsnprintf+0x420>
     814:	00279713          	slli	a4,a5,0x2
     818:	000027b7          	lui	a5,0x2
     81c:	d1078793          	addi	a5,a5,-752 # 1d10 <BSS_END+0x28>
     820:	00f707b3          	add	a5,a4,a5
     824:	0007a783          	lw	a5,0(a5)
     828:	00078067          	jr	a5
			case 'l': {
				longarg = 1;
     82c:	00100793          	li	a5,1
     830:	fef42423          	sw	a5,-24(s0)
				break;
     834:	3bc0006f          	j	bf0 <_vsnprintf+0x424>
			}
			case 'p': {
				longarg = 1;
     838:	00100793          	li	a5,1
     83c:	fef42423          	sw	a5,-24(s0)
				if (out && pos < n) {
     840:	fbc42783          	lw	a5,-68(s0)
     844:	02078263          	beqz	a5,868 <_vsnprintf+0x9c>
     848:	fe442703          	lw	a4,-28(s0)
     84c:	fb842783          	lw	a5,-72(s0)
     850:	00f77c63          	bgeu	a4,a5,868 <_vsnprintf+0x9c>
					out[pos] = '0';
     854:	fbc42703          	lw	a4,-68(s0)
     858:	fe442783          	lw	a5,-28(s0)
     85c:	00f707b3          	add	a5,a4,a5
     860:	03000713          	li	a4,48
     864:	00e78023          	sb	a4,0(a5)
				}
				pos++;
     868:	fe442783          	lw	a5,-28(s0)
     86c:	00178793          	addi	a5,a5,1
     870:	fef42223          	sw	a5,-28(s0)
				if (out && pos < n) {
     874:	fbc42783          	lw	a5,-68(s0)
     878:	02078263          	beqz	a5,89c <_vsnprintf+0xd0>
     87c:	fe442703          	lw	a4,-28(s0)
     880:	fb842783          	lw	a5,-72(s0)
     884:	00f77c63          	bgeu	a4,a5,89c <_vsnprintf+0xd0>
					out[pos] = 'x';
     888:	fbc42703          	lw	a4,-68(s0)
     88c:	fe442783          	lw	a5,-28(s0)
     890:	00f707b3          	add	a5,a4,a5
     894:	07800713          	li	a4,120
     898:	00e78023          	sb	a4,0(a5)
				}
				pos++;
     89c:	fe442783          	lw	a5,-28(s0)
     8a0:	00178793          	addi	a5,a5,1
     8a4:	fef42223          	sw	a5,-28(s0)
			}
			case 'x': {
				long num = longarg ? va_arg(vl, long) : va_arg(vl, int);
     8a8:	fe842783          	lw	a5,-24(s0)
     8ac:	00078c63          	beqz	a5,8c4 <_vsnprintf+0xf8>
     8b0:	fb042783          	lw	a5,-80(s0)
     8b4:	00478713          	addi	a4,a5,4
     8b8:	fae42823          	sw	a4,-80(s0)
     8bc:	0007a783          	lw	a5,0(a5)
     8c0:	0140006f          	j	8d4 <_vsnprintf+0x108>
     8c4:	fb042783          	lw	a5,-80(s0)
     8c8:	00478713          	addi	a4,a5,4
     8cc:	fae42823          	sw	a4,-80(s0)
     8d0:	0007a783          	lw	a5,0(a5)
     8d4:	fcf42423          	sw	a5,-56(s0)
				int hexdigits = 2*(longarg ? sizeof(long) : sizeof(int))-1;
     8d8:	00700793          	li	a5,7
     8dc:	fcf42223          	sw	a5,-60(s0)
				for(int i = hexdigits; i >= 0; i--) {
     8e0:	fc442783          	lw	a5,-60(s0)
     8e4:	fef42023          	sw	a5,-32(s0)
     8e8:	0880006f          	j	970 <_vsnprintf+0x1a4>
					int d = (num >> (4*i)) & 0xF;
     8ec:	fe042783          	lw	a5,-32(s0)
     8f0:	00279793          	slli	a5,a5,0x2
     8f4:	fc842703          	lw	a4,-56(s0)
     8f8:	40f757b3          	sra	a5,a4,a5
     8fc:	00f7f793          	andi	a5,a5,15
     900:	fcf42023          	sw	a5,-64(s0)
					if (out && pos < n) {
     904:	fbc42783          	lw	a5,-68(s0)
     908:	04078863          	beqz	a5,958 <_vsnprintf+0x18c>
     90c:	fe442703          	lw	a4,-28(s0)
     910:	fb842783          	lw	a5,-72(s0)
     914:	04f77263          	bgeu	a4,a5,958 <_vsnprintf+0x18c>
						out[pos] = (d < 10 ? '0'+d : 'a'+d-10);
     918:	fc042703          	lw	a4,-64(s0)
     91c:	00900793          	li	a5,9
     920:	00e7cc63          	blt	a5,a4,938 <_vsnprintf+0x16c>
     924:	fc042783          	lw	a5,-64(s0)
     928:	0ff7f793          	zext.b	a5,a5
     92c:	03078793          	addi	a5,a5,48
     930:	0ff7f793          	zext.b	a5,a5
     934:	0140006f          	j	948 <_vsnprintf+0x17c>
     938:	fc042783          	lw	a5,-64(s0)
     93c:	0ff7f793          	zext.b	a5,a5
     940:	05778793          	addi	a5,a5,87
     944:	0ff7f793          	zext.b	a5,a5
     948:	fbc42683          	lw	a3,-68(s0)
     94c:	fe442703          	lw	a4,-28(s0)
     950:	00e68733          	add	a4,a3,a4
     954:	00f70023          	sb	a5,0(a4)
					}
					pos++;
     958:	fe442783          	lw	a5,-28(s0)
     95c:	00178793          	addi	a5,a5,1
     960:	fef42223          	sw	a5,-28(s0)
				for(int i = hexdigits; i >= 0; i--) {
     964:	fe042783          	lw	a5,-32(s0)
     968:	fff78793          	addi	a5,a5,-1
     96c:	fef42023          	sw	a5,-32(s0)
     970:	fe042783          	lw	a5,-32(s0)
     974:	f607dce3          	bgez	a5,8ec <_vsnprintf+0x120>
				}
				longarg = 0;
     978:	fe042423          	sw	zero,-24(s0)
				format = 0;
     97c:	fe042623          	sw	zero,-20(s0)
				break;
     980:	2700006f          	j	bf0 <_vsnprintf+0x424>
			}
			case 'd': {
				long num = longarg ? va_arg(vl, long) : va_arg(vl, int);
     984:	fe842783          	lw	a5,-24(s0)
     988:	00078c63          	beqz	a5,9a0 <_vsnprintf+0x1d4>
     98c:	fb042783          	lw	a5,-80(s0)
     990:	00478713          	addi	a4,a5,4
     994:	fae42823          	sw	a4,-80(s0)
     998:	0007a783          	lw	a5,0(a5)
     99c:	0140006f          	j	9b0 <_vsnprintf+0x1e4>
     9a0:	fb042783          	lw	a5,-80(s0)
     9a4:	00478713          	addi	a4,a5,4
     9a8:	fae42823          	sw	a4,-80(s0)
     9ac:	0007a783          	lw	a5,0(a5)
     9b0:	fcf42e23          	sw	a5,-36(s0)
				if (num < 0) {
     9b4:	fdc42783          	lw	a5,-36(s0)
     9b8:	0407d263          	bgez	a5,9fc <_vsnprintf+0x230>
					num = -num;
     9bc:	fdc42783          	lw	a5,-36(s0)
     9c0:	40f007b3          	neg	a5,a5
     9c4:	fcf42e23          	sw	a5,-36(s0)
					if (out && pos < n) {
     9c8:	fbc42783          	lw	a5,-68(s0)
     9cc:	02078263          	beqz	a5,9f0 <_vsnprintf+0x224>
     9d0:	fe442703          	lw	a4,-28(s0)
     9d4:	fb842783          	lw	a5,-72(s0)
     9d8:	00f77c63          	bgeu	a4,a5,9f0 <_vsnprintf+0x224>
						out[pos] = '-';
     9dc:	fbc42703          	lw	a4,-68(s0)
     9e0:	fe442783          	lw	a5,-28(s0)
     9e4:	00f707b3          	add	a5,a4,a5
     9e8:	02d00713          	li	a4,45
     9ec:	00e78023          	sb	a4,0(a5)
					}
					pos++;
     9f0:	fe442783          	lw	a5,-28(s0)
     9f4:	00178793          	addi	a5,a5,1
     9f8:	fef42223          	sw	a5,-28(s0)
				}
				long digits = 1;
     9fc:	00100793          	li	a5,1
     a00:	fcf42c23          	sw	a5,-40(s0)
				for (long nn = num; nn /= 10; digits++);
     a04:	fdc42783          	lw	a5,-36(s0)
     a08:	fcf42a23          	sw	a5,-44(s0)
     a0c:	0100006f          	j	a1c <_vsnprintf+0x250>
     a10:	fd842783          	lw	a5,-40(s0)
     a14:	00178793          	addi	a5,a5,1
     a18:	fcf42c23          	sw	a5,-40(s0)
     a1c:	fd442703          	lw	a4,-44(s0)
     a20:	00a00793          	li	a5,10
     a24:	02f747b3          	div	a5,a4,a5
     a28:	fcf42a23          	sw	a5,-44(s0)
     a2c:	fd442783          	lw	a5,-44(s0)
     a30:	fe0790e3          	bnez	a5,a10 <_vsnprintf+0x244>
				for (int i = digits-1; i >= 0; i--) {
     a34:	fd842783          	lw	a5,-40(s0)
     a38:	fff78793          	addi	a5,a5,-1
     a3c:	fcf42823          	sw	a5,-48(s0)
     a40:	06c0006f          	j	aac <_vsnprintf+0x2e0>
					if (out && pos + i < n) {
     a44:	fbc42783          	lw	a5,-68(s0)
     a48:	04078463          	beqz	a5,a90 <_vsnprintf+0x2c4>
     a4c:	fd042703          	lw	a4,-48(s0)
     a50:	fe442783          	lw	a5,-28(s0)
     a54:	00f707b3          	add	a5,a4,a5
     a58:	fb842703          	lw	a4,-72(s0)
     a5c:	02e7fa63          	bgeu	a5,a4,a90 <_vsnprintf+0x2c4>
						out[pos + i] = '0' + (num % 10);
     a60:	fdc42703          	lw	a4,-36(s0)
     a64:	00a00793          	li	a5,10
     a68:	02f767b3          	rem	a5,a4,a5
     a6c:	0ff7f713          	zext.b	a4,a5
     a70:	fd042683          	lw	a3,-48(s0)
     a74:	fe442783          	lw	a5,-28(s0)
     a78:	00f687b3          	add	a5,a3,a5
     a7c:	fbc42683          	lw	a3,-68(s0)
     a80:	00f687b3          	add	a5,a3,a5
     a84:	03070713          	addi	a4,a4,48
     a88:	0ff77713          	zext.b	a4,a4
     a8c:	00e78023          	sb	a4,0(a5)
					}
					num /= 10;
     a90:	fdc42703          	lw	a4,-36(s0)
     a94:	00a00793          	li	a5,10
     a98:	02f747b3          	div	a5,a4,a5
     a9c:	fcf42e23          	sw	a5,-36(s0)
				for (int i = digits-1; i >= 0; i--) {
     aa0:	fd042783          	lw	a5,-48(s0)
     aa4:	fff78793          	addi	a5,a5,-1
     aa8:	fcf42823          	sw	a5,-48(s0)
     aac:	fd042783          	lw	a5,-48(s0)
     ab0:	f807dae3          	bgez	a5,a44 <_vsnprintf+0x278>
				}
				pos += digits;
     ab4:	fd842783          	lw	a5,-40(s0)
     ab8:	fe442703          	lw	a4,-28(s0)
     abc:	00f707b3          	add	a5,a4,a5
     ac0:	fef42223          	sw	a5,-28(s0)
				longarg = 0;
     ac4:	fe042423          	sw	zero,-24(s0)
				format = 0;
     ac8:	fe042623          	sw	zero,-20(s0)
				break;
     acc:	1240006f          	j	bf0 <_vsnprintf+0x424>
			}
			case 's': {
				const char* s2 = va_arg(vl, const char*);
     ad0:	fb042783          	lw	a5,-80(s0)
     ad4:	00478713          	addi	a4,a5,4
     ad8:	fae42823          	sw	a4,-80(s0)
     adc:	0007a783          	lw	a5,0(a5)
     ae0:	fcf42623          	sw	a5,-52(s0)
				while (*s2) {
     ae4:	0480006f          	j	b2c <_vsnprintf+0x360>
					if (out && pos < n) {
     ae8:	fbc42783          	lw	a5,-68(s0)
     aec:	02078463          	beqz	a5,b14 <_vsnprintf+0x348>
     af0:	fe442703          	lw	a4,-28(s0)
     af4:	fb842783          	lw	a5,-72(s0)
     af8:	00f77e63          	bgeu	a4,a5,b14 <_vsnprintf+0x348>
						out[pos] = *s2;
     afc:	fbc42703          	lw	a4,-68(s0)
     b00:	fe442783          	lw	a5,-28(s0)
     b04:	00f707b3          	add	a5,a4,a5
     b08:	fcc42703          	lw	a4,-52(s0)
     b0c:	00074703          	lbu	a4,0(a4)
     b10:	00e78023          	sb	a4,0(a5)
					}
					pos++;
     b14:	fe442783          	lw	a5,-28(s0)
     b18:	00178793          	addi	a5,a5,1
     b1c:	fef42223          	sw	a5,-28(s0)
					s2++;
     b20:	fcc42783          	lw	a5,-52(s0)
     b24:	00178793          	addi	a5,a5,1
     b28:	fcf42623          	sw	a5,-52(s0)
				while (*s2) {
     b2c:	fcc42783          	lw	a5,-52(s0)
     b30:	0007c783          	lbu	a5,0(a5)
     b34:	fa079ae3          	bnez	a5,ae8 <_vsnprintf+0x31c>
				}
				longarg = 0;
     b38:	fe042423          	sw	zero,-24(s0)
				format = 0;
     b3c:	fe042623          	sw	zero,-20(s0)
				break;
     b40:	0b00006f          	j	bf0 <_vsnprintf+0x424>
			}
			case 'c': {
				if (out && pos < n) {
     b44:	fbc42783          	lw	a5,-68(s0)
     b48:	02078a63          	beqz	a5,b7c <_vsnprintf+0x3b0>
     b4c:	fe442703          	lw	a4,-28(s0)
     b50:	fb842783          	lw	a5,-72(s0)
     b54:	02f77463          	bgeu	a4,a5,b7c <_vsnprintf+0x3b0>
					out[pos] = (char)va_arg(vl,int);
     b58:	fb042783          	lw	a5,-80(s0)
     b5c:	00478713          	addi	a4,a5,4
     b60:	fae42823          	sw	a4,-80(s0)
     b64:	0007a683          	lw	a3,0(a5)
     b68:	fbc42703          	lw	a4,-68(s0)
     b6c:	fe442783          	lw	a5,-28(s0)
     b70:	00f707b3          	add	a5,a4,a5
     b74:	0ff6f713          	zext.b	a4,a3
     b78:	00e78023          	sb	a4,0(a5)
				}
				pos++;
     b7c:	fe442783          	lw	a5,-28(s0)
     b80:	00178793          	addi	a5,a5,1
     b84:	fef42223          	sw	a5,-28(s0)
				longarg = 0;
     b88:	fe042423          	sw	zero,-24(s0)
				format = 0;
     b8c:	fe042623          	sw	zero,-20(s0)
				break;
     b90:	0600006f          	j	bf0 <_vsnprintf+0x424>
			}
			default:
				break;
			}
		} else if (*s == '%') {
     b94:	fb442783          	lw	a5,-76(s0)
     b98:	0007c703          	lbu	a4,0(a5)
     b9c:	02500793          	li	a5,37
     ba0:	00f71863          	bne	a4,a5,bb0 <_vsnprintf+0x3e4>
			format = 1;
     ba4:	00100793          	li	a5,1
     ba8:	fef42623          	sw	a5,-20(s0)
     bac:	0440006f          	j	bf0 <_vsnprintf+0x424>
		} else {
			if (out && pos < n) {
     bb0:	fbc42783          	lw	a5,-68(s0)
     bb4:	02078463          	beqz	a5,bdc <_vsnprintf+0x410>
     bb8:	fe442703          	lw	a4,-28(s0)
     bbc:	fb842783          	lw	a5,-72(s0)
     bc0:	00f77e63          	bgeu	a4,a5,bdc <_vsnprintf+0x410>
				out[pos] = *s;
     bc4:	fbc42703          	lw	a4,-68(s0)
     bc8:	fe442783          	lw	a5,-28(s0)
     bcc:	00f707b3          	add	a5,a4,a5
     bd0:	fb442703          	lw	a4,-76(s0)
     bd4:	00074703          	lbu	a4,0(a4)
     bd8:	00e78023          	sb	a4,0(a5)
			}
			pos++;
     bdc:	fe442783          	lw	a5,-28(s0)
     be0:	00178793          	addi	a5,a5,1
     be4:	fef42223          	sw	a5,-28(s0)
     be8:	0080006f          	j	bf0 <_vsnprintf+0x424>
				break;
     bec:	00000013          	nop
	for (; *s; s++) {
     bf0:	fb442783          	lw	a5,-76(s0)
     bf4:	00178793          	addi	a5,a5,1
     bf8:	faf42a23          	sw	a5,-76(s0)
     bfc:	fb442783          	lw	a5,-76(s0)
     c00:	0007c783          	lbu	a5,0(a5)
     c04:	be079ae3          	bnez	a5,7f8 <_vsnprintf+0x2c>
		}
    	}
	if (out && pos < n) {
     c08:	fbc42783          	lw	a5,-68(s0)
     c0c:	02078263          	beqz	a5,c30 <_vsnprintf+0x464>
     c10:	fe442703          	lw	a4,-28(s0)
     c14:	fb842783          	lw	a5,-72(s0)
     c18:	00f77c63          	bgeu	a4,a5,c30 <_vsnprintf+0x464>
		out[pos] = 0;
     c1c:	fbc42703          	lw	a4,-68(s0)
     c20:	fe442783          	lw	a5,-28(s0)
     c24:	00f707b3          	add	a5,a4,a5
     c28:	00078023          	sb	zero,0(a5)
     c2c:	0280006f          	j	c54 <_vsnprintf+0x488>
	} else if (out && n) {
     c30:	fbc42783          	lw	a5,-68(s0)
     c34:	02078063          	beqz	a5,c54 <_vsnprintf+0x488>
     c38:	fb842783          	lw	a5,-72(s0)
     c3c:	00078c63          	beqz	a5,c54 <_vsnprintf+0x488>
		out[n-1] = 0;
     c40:	fb842783          	lw	a5,-72(s0)
     c44:	fff78793          	addi	a5,a5,-1
     c48:	fbc42703          	lw	a4,-68(s0)
     c4c:	00f707b3          	add	a5,a4,a5
     c50:	00078023          	sb	zero,0(a5)
	}
	return pos;
     c54:	fe442783          	lw	a5,-28(s0)
}
     c58:	00078513          	mv	a0,a5
     c5c:	04c12403          	lw	s0,76(sp)
     c60:	05010113          	addi	sp,sp,80
     c64:	00008067          	ret

00000c68 <_vprintf>:

static char out_buf[1000]; // buffer for _vprintf()

static int _vprintf(const char* s, va_list vl)
{
     c68:	fd010113          	addi	sp,sp,-48
     c6c:	02112623          	sw	ra,44(sp)
     c70:	02812423          	sw	s0,40(sp)
     c74:	03010413          	addi	s0,sp,48
     c78:	fca42e23          	sw	a0,-36(s0)
     c7c:	fcb42c23          	sw	a1,-40(s0)
	int res = _vsnprintf(NULL, -1, s, vl);
     c80:	fd842683          	lw	a3,-40(s0)
     c84:	fdc42603          	lw	a2,-36(s0)
     c88:	fff00593          	li	a1,-1
     c8c:	00000513          	li	a0,0
     c90:	b3dff0ef          	jal	ra,7cc <_vsnprintf>
     c94:	fea42623          	sw	a0,-20(s0)
	if (res+1 >= sizeof(out_buf)) {
     c98:	fec42783          	lw	a5,-20(s0)
     c9c:	00178793          	addi	a5,a5,1
     ca0:	00078713          	mv	a4,a5
     ca4:	3e700793          	li	a5,999
     ca8:	00e7fc63          	bgeu	a5,a4,cc0 <_vprintf+0x58>
		uart_puts("error: output string size overflow\n");
     cac:	000027b7          	lui	a5,0x2
     cb0:	d6878513          	addi	a0,a5,-664 # 1d68 <BSS_END+0x80>
     cb4:	a35ff0ef          	jal	ra,6e8 <uart_puts>
		while(1) {}
     cb8:	00000013          	nop
     cbc:	ffdff06f          	j	cb8 <_vprintf+0x50>
	}
	_vsnprintf(out_buf, res + 1, s, vl);
     cc0:	fec42783          	lw	a5,-20(s0)
     cc4:	00178793          	addi	a5,a5,1
     cc8:	fd842683          	lw	a3,-40(s0)
     ccc:	fdc42603          	lw	a2,-36(s0)
     cd0:	00078593          	mv	a1,a5
     cd4:	000037b7          	lui	a5,0x3
     cd8:	00478513          	addi	a0,a5,4 # 3004 <out_buf>
     cdc:	af1ff0ef          	jal	ra,7cc <_vsnprintf>
	uart_puts(out_buf);
     ce0:	000037b7          	lui	a5,0x3
     ce4:	00478513          	addi	a0,a5,4 # 3004 <out_buf>
     ce8:	a01ff0ef          	jal	ra,6e8 <uart_puts>
	return res;
     cec:	fec42783          	lw	a5,-20(s0)
}
     cf0:	00078513          	mv	a0,a5
     cf4:	02c12083          	lw	ra,44(sp)
     cf8:	02812403          	lw	s0,40(sp)
     cfc:	03010113          	addi	sp,sp,48
     d00:	00008067          	ret

00000d04 <printf>:

int printf(const char* s, ...)
{
     d04:	fb010113          	addi	sp,sp,-80
     d08:	02112623          	sw	ra,44(sp)
     d0c:	02812423          	sw	s0,40(sp)
     d10:	03010413          	addi	s0,sp,48
     d14:	fca42e23          	sw	a0,-36(s0)
     d18:	00b42223          	sw	a1,4(s0)
     d1c:	00c42423          	sw	a2,8(s0)
     d20:	00d42623          	sw	a3,12(s0)
     d24:	00e42823          	sw	a4,16(s0)
     d28:	00f42a23          	sw	a5,20(s0)
     d2c:	01042c23          	sw	a6,24(s0)
     d30:	01142e23          	sw	a7,28(s0)
	int res = 0;
     d34:	fe042623          	sw	zero,-20(s0)
	va_list vl;
	va_start(vl, s);
     d38:	02040793          	addi	a5,s0,32
     d3c:	fcf42c23          	sw	a5,-40(s0)
     d40:	fd842783          	lw	a5,-40(s0)
     d44:	fe478793          	addi	a5,a5,-28
     d48:	fef42423          	sw	a5,-24(s0)
	res = _vprintf(s, vl);
     d4c:	fe842783          	lw	a5,-24(s0)
     d50:	00078593          	mv	a1,a5
     d54:	fdc42503          	lw	a0,-36(s0)
     d58:	f11ff0ef          	jal	ra,c68 <_vprintf>
     d5c:	fea42623          	sw	a0,-20(s0)
	va_end(vl);
	return res;
     d60:	fec42783          	lw	a5,-20(s0)
}
     d64:	00078513          	mv	a0,a5
     d68:	02c12083          	lw	ra,44(sp)
     d6c:	02812403          	lw	s0,40(sp)
     d70:	05010113          	addi	sp,sp,80
     d74:	00008067          	ret

00000d78 <panic>:

void panic(char *s)
{
     d78:	fe010113          	addi	sp,sp,-32
     d7c:	00112e23          	sw	ra,28(sp)
     d80:	00812c23          	sw	s0,24(sp)
     d84:	02010413          	addi	s0,sp,32
     d88:	fea42623          	sw	a0,-20(s0)
	printf("panic: ");
     d8c:	000027b7          	lui	a5,0x2
     d90:	d8c78513          	addi	a0,a5,-628 # 1d8c <BSS_END+0xa4>
     d94:	f71ff0ef          	jal	ra,d04 <printf>
	printf(s);
     d98:	fec42503          	lw	a0,-20(s0)
     d9c:	f69ff0ef          	jal	ra,d04 <printf>
	printf("\n");
     da0:	000027b7          	lui	a5,0x2
     da4:	d9478513          	addi	a0,a5,-620 # 1d94 <BSS_END+0xac>
     da8:	f5dff0ef          	jal	ra,d04 <printf>
	while(1){};
     dac:	00000013          	nop
     db0:	ffdff06f          	j	dac <panic+0x34>

00000db4 <_clear>:
struct Page {
	uint8_t flags;
};

static inline void _clear(struct Page *page)
{
     db4:	fe010113          	addi	sp,sp,-32
     db8:	00812e23          	sw	s0,28(sp)
     dbc:	02010413          	addi	s0,sp,32
     dc0:	fea42623          	sw	a0,-20(s0)
	page->flags = 0;
     dc4:	fec42783          	lw	a5,-20(s0)
     dc8:	00078023          	sb	zero,0(a5)
}
     dcc:	00000013          	nop
     dd0:	01c12403          	lw	s0,28(sp)
     dd4:	02010113          	addi	sp,sp,32
     dd8:	00008067          	ret

00000ddc <_is_free>:

static inline int _is_free(struct Page *page)
{
     ddc:	fe010113          	addi	sp,sp,-32
     de0:	00812e23          	sw	s0,28(sp)
     de4:	02010413          	addi	s0,sp,32
     de8:	fea42623          	sw	a0,-20(s0)
	if (page->flags & PAGE_TAKEN) {
     dec:	fec42783          	lw	a5,-20(s0)
     df0:	0007c783          	lbu	a5,0(a5)
     df4:	0017f793          	andi	a5,a5,1
     df8:	00078663          	beqz	a5,e04 <_is_free+0x28>
		return 0;
     dfc:	00000793          	li	a5,0
     e00:	0080006f          	j	e08 <_is_free+0x2c>
	} else {
		return 1;
     e04:	00100793          	li	a5,1
	}
}
     e08:	00078513          	mv	a0,a5
     e0c:	01c12403          	lw	s0,28(sp)
     e10:	02010113          	addi	sp,sp,32
     e14:	00008067          	ret

00000e18 <_set_flag>:

static inline void _set_flag(struct Page *page, uint8_t flags)
{
     e18:	fe010113          	addi	sp,sp,-32
     e1c:	00812e23          	sw	s0,28(sp)
     e20:	02010413          	addi	s0,sp,32
     e24:	fea42623          	sw	a0,-20(s0)
     e28:	00058793          	mv	a5,a1
     e2c:	fef405a3          	sb	a5,-21(s0)
	page->flags |= flags;
     e30:	fec42783          	lw	a5,-20(s0)
     e34:	0007c783          	lbu	a5,0(a5)
     e38:	feb44703          	lbu	a4,-21(s0)
     e3c:	00e7e7b3          	or	a5,a5,a4
     e40:	0ff7f713          	zext.b	a4,a5
     e44:	fec42783          	lw	a5,-20(s0)
     e48:	00e78023          	sb	a4,0(a5)
}
     e4c:	00000013          	nop
     e50:	01c12403          	lw	s0,28(sp)
     e54:	02010113          	addi	sp,sp,32
     e58:	00008067          	ret

00000e5c <_is_last>:

static inline int _is_last(struct Page *page)
{
     e5c:	fe010113          	addi	sp,sp,-32
     e60:	00812e23          	sw	s0,28(sp)
     e64:	02010413          	addi	s0,sp,32
     e68:	fea42623          	sw	a0,-20(s0)
	if (page->flags & PAGE_LAST) {
     e6c:	fec42783          	lw	a5,-20(s0)
     e70:	0007c783          	lbu	a5,0(a5)
     e74:	0027f793          	andi	a5,a5,2
     e78:	00078663          	beqz	a5,e84 <_is_last+0x28>
		return 1;
     e7c:	00100793          	li	a5,1
     e80:	0080006f          	j	e88 <_is_last+0x2c>
	} else {
		return 0;
     e84:	00000793          	li	a5,0
	}
}
     e88:	00078513          	mv	a0,a5
     e8c:	01c12403          	lw	s0,28(sp)
     e90:	02010113          	addi	sp,sp,32
     e94:	00008067          	ret

00000e98 <_align_page>:

/*
 * align the address to the border of page(4K)
 */
static inline uint32_t _align_page(uint32_t address)
{
     e98:	fd010113          	addi	sp,sp,-48
     e9c:	02812623          	sw	s0,44(sp)
     ea0:	03010413          	addi	s0,sp,48
     ea4:	fca42e23          	sw	a0,-36(s0)
	uint32_t order = (1 << PAGE_ORDER) - 1;
     ea8:	000017b7          	lui	a5,0x1
     eac:	fff78793          	addi	a5,a5,-1 # fff <page_init+0x123>
     eb0:	fef42623          	sw	a5,-20(s0)
	return (address + order) & (~order);
     eb4:	fdc42703          	lw	a4,-36(s0)
     eb8:	fec42783          	lw	a5,-20(s0)
     ebc:	00f70733          	add	a4,a4,a5
     ec0:	fec42783          	lw	a5,-20(s0)
     ec4:	fff7c793          	not	a5,a5
     ec8:	00f777b3          	and	a5,a4,a5
}
     ecc:	00078513          	mv	a0,a5
     ed0:	02c12403          	lw	s0,44(sp)
     ed4:	03010113          	addi	sp,sp,48
     ed8:	00008067          	ret

00000edc <page_init>:

void page_init()
{
     edc:	fe010113          	addi	sp,sp,-32
     ee0:	00112e23          	sw	ra,28(sp)
     ee4:	00812c23          	sw	s0,24(sp)
     ee8:	02010413          	addi	s0,sp,32
	/* 
	 * We reserved 8 Page (8 x 4096) to hold the Page structures.
	 * It should be enough to manage at most 128 MB (8 x 4096 x 4096) 
	 */
	_num_pages = (HEAP_SIZE / PAGE_SIZE) - 8;
     eec:	000027b7          	lui	a5,0x2
     ef0:	cc87a783          	lw	a5,-824(a5) # 1cc8 <HEAP_SIZE>
     ef4:	00c7d793          	srli	a5,a5,0xc
     ef8:	ff878713          	addi	a4,a5,-8
     efc:	000037b7          	lui	a5,0x3
     f00:	3ee7aa23          	sw	a4,1012(a5) # 33f4 <_num_pages>
	printf("HEAP_START = %x, HEAP_SIZE = %x, num of pages = %d\n", HEAP_START, HEAP_SIZE, _num_pages);
     f04:	000027b7          	lui	a5,0x2
     f08:	cc47a703          	lw	a4,-828(a5) # 1cc4 <_text_end>
     f0c:	000027b7          	lui	a5,0x2
     f10:	cc87a603          	lw	a2,-824(a5) # 1cc8 <HEAP_SIZE>
     f14:	000037b7          	lui	a5,0x3
     f18:	3f47a783          	lw	a5,1012(a5) # 33f4 <_num_pages>
     f1c:	00078693          	mv	a3,a5
     f20:	00070593          	mv	a1,a4
     f24:	000027b7          	lui	a5,0x2
     f28:	d9878513          	addi	a0,a5,-616 # 1d98 <BSS_END+0xb0>
     f2c:	dd9ff0ef          	jal	ra,d04 <printf>
	
	struct Page *page = (struct Page *)HEAP_START;
     f30:	000027b7          	lui	a5,0x2
     f34:	cc47a783          	lw	a5,-828(a5) # 1cc4 <_text_end>
     f38:	fef42623          	sw	a5,-20(s0)
	for (int i = 0; i < _num_pages; i++) {
     f3c:	fe042423          	sw	zero,-24(s0)
     f40:	0240006f          	j	f64 <page_init+0x88>
		_clear(page);
     f44:	fec42503          	lw	a0,-20(s0)
     f48:	e6dff0ef          	jal	ra,db4 <_clear>
		page++;	
     f4c:	fec42783          	lw	a5,-20(s0)
     f50:	00178793          	addi	a5,a5,1
     f54:	fef42623          	sw	a5,-20(s0)
	for (int i = 0; i < _num_pages; i++) {
     f58:	fe842783          	lw	a5,-24(s0)
     f5c:	00178793          	addi	a5,a5,1
     f60:	fef42423          	sw	a5,-24(s0)
     f64:	fe842703          	lw	a4,-24(s0)
     f68:	000037b7          	lui	a5,0x3
     f6c:	3f47a783          	lw	a5,1012(a5) # 33f4 <_num_pages>
     f70:	fcf76ae3          	bltu	a4,a5,f44 <page_init+0x68>
	}

	_alloc_start = _align_page(HEAP_START + 8 * PAGE_SIZE);
     f74:	000027b7          	lui	a5,0x2
     f78:	cc47a703          	lw	a4,-828(a5) # 1cc4 <_text_end>
     f7c:	000087b7          	lui	a5,0x8
     f80:	00f707b3          	add	a5,a4,a5
     f84:	00078513          	mv	a0,a5
     f88:	f11ff0ef          	jal	ra,e98 <_align_page>
     f8c:	00050713          	mv	a4,a0
     f90:	000037b7          	lui	a5,0x3
     f94:	3ee7a623          	sw	a4,1004(a5) # 33ec <_alloc_start>
	_alloc_end = _alloc_start + (PAGE_SIZE * _num_pages);
     f98:	000037b7          	lui	a5,0x3
     f9c:	3f47a783          	lw	a5,1012(a5) # 33f4 <_num_pages>
     fa0:	00c79713          	slli	a4,a5,0xc
     fa4:	000037b7          	lui	a5,0x3
     fa8:	3ec7a783          	lw	a5,1004(a5) # 33ec <_alloc_start>
     fac:	00f70733          	add	a4,a4,a5
     fb0:	000037b7          	lui	a5,0x3
     fb4:	3ee7a823          	sw	a4,1008(a5) # 33f0 <_alloc_end>

	printf("TEXT:   0x%x -> 0x%x\n", TEXT_START, TEXT_END);
     fb8:	000027b7          	lui	a5,0x2
     fbc:	ccc7a703          	lw	a4,-820(a5) # 1ccc <TEXT_START>
     fc0:	000027b7          	lui	a5,0x2
     fc4:	cd07a783          	lw	a5,-816(a5) # 1cd0 <TEXT_END>
     fc8:	00078613          	mv	a2,a5
     fcc:	00070593          	mv	a1,a4
     fd0:	000027b7          	lui	a5,0x2
     fd4:	dcc78513          	addi	a0,a5,-564 # 1dcc <BSS_END+0xe4>
     fd8:	d2dff0ef          	jal	ra,d04 <printf>
	printf("RODATA: 0x%x -> 0x%x\n", RODATA_START, RODATA_END);
     fdc:	000027b7          	lui	a5,0x2
     fe0:	cdc7a703          	lw	a4,-804(a5) # 1cdc <RODATA_START>
     fe4:	000027b7          	lui	a5,0x2
     fe8:	ce07a783          	lw	a5,-800(a5) # 1ce0 <RODATA_END>
     fec:	00078613          	mv	a2,a5
     ff0:	00070593          	mv	a1,a4
     ff4:	000027b7          	lui	a5,0x2
     ff8:	de478513          	addi	a0,a5,-540 # 1de4 <BSS_END+0xfc>
     ffc:	d09ff0ef          	jal	ra,d04 <printf>
	printf("DATA:   0x%x -> 0x%x\n", DATA_START, DATA_END);
    1000:	000027b7          	lui	a5,0x2
    1004:	cd47a703          	lw	a4,-812(a5) # 1cd4 <DATA_START>
    1008:	000027b7          	lui	a5,0x2
    100c:	cd87a783          	lw	a5,-808(a5) # 1cd8 <DATA_END>
    1010:	00078613          	mv	a2,a5
    1014:	00070593          	mv	a1,a4
    1018:	000027b7          	lui	a5,0x2
    101c:	dfc78513          	addi	a0,a5,-516 # 1dfc <BSS_END+0x114>
    1020:	ce5ff0ef          	jal	ra,d04 <printf>
	printf("BSS:    0x%x -> 0x%x\n", BSS_START, BSS_END);
    1024:	000027b7          	lui	a5,0x2
    1028:	ce47a703          	lw	a4,-796(a5) # 1ce4 <BSS_START>
    102c:	000027b7          	lui	a5,0x2
    1030:	ce87a783          	lw	a5,-792(a5) # 1ce8 <BSS_END>
    1034:	00078613          	mv	a2,a5
    1038:	00070593          	mv	a1,a4
    103c:	000027b7          	lui	a5,0x2
    1040:	e1478513          	addi	a0,a5,-492 # 1e14 <BSS_END+0x12c>
    1044:	cc1ff0ef          	jal	ra,d04 <printf>
	printf("HEAP:   0x%x -> 0x%x\n", _alloc_start, _alloc_end);
    1048:	000037b7          	lui	a5,0x3
    104c:	3ec7a703          	lw	a4,1004(a5) # 33ec <_alloc_start>
    1050:	000037b7          	lui	a5,0x3
    1054:	3f07a783          	lw	a5,1008(a5) # 33f0 <_alloc_end>
    1058:	00078613          	mv	a2,a5
    105c:	00070593          	mv	a1,a4
    1060:	000027b7          	lui	a5,0x2
    1064:	e2c78513          	addi	a0,a5,-468 # 1e2c <BSS_END+0x144>
    1068:	c9dff0ef          	jal	ra,d04 <printf>
}
    106c:	00000013          	nop
    1070:	01c12083          	lw	ra,28(sp)
    1074:	01812403          	lw	s0,24(sp)
    1078:	02010113          	addi	sp,sp,32
    107c:	00008067          	ret

00001080 <page_alloc>:
/*
 * Allocate a memory block which is composed of contiguous physical pages
 * - npages: the number of PAGE_SIZE pages to allocate
 */
void *page_alloc(int npages)
{
    1080:	fc010113          	addi	sp,sp,-64
    1084:	02112e23          	sw	ra,60(sp)
    1088:	02812c23          	sw	s0,56(sp)
    108c:	04010413          	addi	s0,sp,64
    1090:	fca42623          	sw	a0,-52(s0)
	/* Note we are searching the page descriptor bitmaps. */
	int found = 0;
    1094:	fe042623          	sw	zero,-20(s0)
	struct Page *page_i = (struct Page *)HEAP_START;
    1098:	000027b7          	lui	a5,0x2
    109c:	cc47a783          	lw	a5,-828(a5) # 1cc4 <_text_end>
    10a0:	fef42423          	sw	a5,-24(s0)
	for (int i = 0; i <= (_num_pages - npages); i++) {
    10a4:	fe042223          	sw	zero,-28(s0)
    10a8:	1140006f          	j	11bc <page_alloc+0x13c>
		if (_is_free(page_i)) {
    10ac:	fe842503          	lw	a0,-24(s0)
    10b0:	d2dff0ef          	jal	ra,ddc <_is_free>
    10b4:	00050793          	mv	a5,a0
    10b8:	0e078663          	beqz	a5,11a4 <page_alloc+0x124>
			found = 1;
    10bc:	00100793          	li	a5,1
    10c0:	fef42623          	sw	a5,-20(s0)
			/* 
			 * meet a free page, continue to check if following
			 * (npages - 1) pages are also unallocated.
			 */
			struct Page *page_j = page_i;
    10c4:	fe842783          	lw	a5,-24(s0)
    10c8:	fef42023          	sw	a5,-32(s0)
			for (int j = i; j < (i + npages); j++) {
    10cc:	fe442783          	lw	a5,-28(s0)
    10d0:	fcf42e23          	sw	a5,-36(s0)
    10d4:	0340006f          	j	1108 <page_alloc+0x88>
				if (!_is_free(page_j)) {
    10d8:	fe042503          	lw	a0,-32(s0)
    10dc:	d01ff0ef          	jal	ra,ddc <_is_free>
    10e0:	00050793          	mv	a5,a0
    10e4:	00079663          	bnez	a5,10f0 <page_alloc+0x70>
					found = 0;
    10e8:	fe042623          	sw	zero,-20(s0)
					break;
    10ec:	0300006f          	j	111c <page_alloc+0x9c>
				}
				page_j++;
    10f0:	fe042783          	lw	a5,-32(s0)
    10f4:	00178793          	addi	a5,a5,1
    10f8:	fef42023          	sw	a5,-32(s0)
			for (int j = i; j < (i + npages); j++) {
    10fc:	fdc42783          	lw	a5,-36(s0)
    1100:	00178793          	addi	a5,a5,1
    1104:	fcf42e23          	sw	a5,-36(s0)
    1108:	fe442703          	lw	a4,-28(s0)
    110c:	fcc42783          	lw	a5,-52(s0)
    1110:	00f707b3          	add	a5,a4,a5
    1114:	fdc42703          	lw	a4,-36(s0)
    1118:	fcf740e3          	blt	a4,a5,10d8 <page_alloc+0x58>
			/*
			 * get a memory block which is good enough for us,
			 * take housekeeping, then return the actual start
			 * address of the first page of this memory block
			 */
			if (found) {
    111c:	fec42783          	lw	a5,-20(s0)
    1120:	08078263          	beqz	a5,11a4 <page_alloc+0x124>
				struct Page *page_k = page_i;
    1124:	fe842783          	lw	a5,-24(s0)
    1128:	fcf42c23          	sw	a5,-40(s0)
				for (int k = i; k < (i + npages); k++) {
    112c:	fe442783          	lw	a5,-28(s0)
    1130:	fcf42a23          	sw	a5,-44(s0)
    1134:	0280006f          	j	115c <page_alloc+0xdc>
					_set_flag(page_k, PAGE_TAKEN);
    1138:	00100593          	li	a1,1
    113c:	fd842503          	lw	a0,-40(s0)
    1140:	cd9ff0ef          	jal	ra,e18 <_set_flag>
					page_k++;
    1144:	fd842783          	lw	a5,-40(s0)
    1148:	00178793          	addi	a5,a5,1
    114c:	fcf42c23          	sw	a5,-40(s0)
				for (int k = i; k < (i + npages); k++) {
    1150:	fd442783          	lw	a5,-44(s0)
    1154:	00178793          	addi	a5,a5,1
    1158:	fcf42a23          	sw	a5,-44(s0)
    115c:	fe442703          	lw	a4,-28(s0)
    1160:	fcc42783          	lw	a5,-52(s0)
    1164:	00f707b3          	add	a5,a4,a5
    1168:	fd442703          	lw	a4,-44(s0)
    116c:	fcf746e3          	blt	a4,a5,1138 <page_alloc+0xb8>
				}
				page_k--;
    1170:	fd842783          	lw	a5,-40(s0)
    1174:	fff78793          	addi	a5,a5,-1
    1178:	fcf42c23          	sw	a5,-40(s0)
				_set_flag(page_k, PAGE_LAST);
    117c:	00200593          	li	a1,2
    1180:	fd842503          	lw	a0,-40(s0)
    1184:	c95ff0ef          	jal	ra,e18 <_set_flag>
				return (void *)(_alloc_start + i * PAGE_SIZE);
    1188:	fe442783          	lw	a5,-28(s0)
    118c:	00c79793          	slli	a5,a5,0xc
    1190:	00078713          	mv	a4,a5
    1194:	000037b7          	lui	a5,0x3
    1198:	3ec7a783          	lw	a5,1004(a5) # 33ec <_alloc_start>
    119c:	00f707b3          	add	a5,a4,a5
    11a0:	0380006f          	j	11d8 <page_alloc+0x158>
			}
		}
		page_i++;
    11a4:	fe842783          	lw	a5,-24(s0)
    11a8:	00178793          	addi	a5,a5,1
    11ac:	fef42423          	sw	a5,-24(s0)
	for (int i = 0; i <= (_num_pages - npages); i++) {
    11b0:	fe442783          	lw	a5,-28(s0)
    11b4:	00178793          	addi	a5,a5,1
    11b8:	fef42223          	sw	a5,-28(s0)
    11bc:	000037b7          	lui	a5,0x3
    11c0:	3f47a703          	lw	a4,1012(a5) # 33f4 <_num_pages>
    11c4:	fcc42783          	lw	a5,-52(s0)
    11c8:	40f70733          	sub	a4,a4,a5
    11cc:	fe442783          	lw	a5,-28(s0)
    11d0:	ecf77ee3          	bgeu	a4,a5,10ac <page_alloc+0x2c>
	}
	return NULL;
    11d4:	00000793          	li	a5,0
}
    11d8:	00078513          	mv	a0,a5
    11dc:	03c12083          	lw	ra,60(sp)
    11e0:	03812403          	lw	s0,56(sp)
    11e4:	04010113          	addi	sp,sp,64
    11e8:	00008067          	ret

000011ec <page_free>:
/*
 * Free the memory block
 * - p: start address of the memory block
 */
void page_free(void *p)
{
    11ec:	fd010113          	addi	sp,sp,-48
    11f0:	02112623          	sw	ra,44(sp)
    11f4:	02812423          	sw	s0,40(sp)
    11f8:	03010413          	addi	s0,sp,48
    11fc:	fca42e23          	sw	a0,-36(s0)
	/*
	 * Assert (TBD) if p is invalid
	 */
	if (!p || (uint32_t)p >= _alloc_end) {
    1200:	fdc42783          	lw	a5,-36(s0)
    1204:	08078463          	beqz	a5,128c <page_free+0xa0>
    1208:	fdc42703          	lw	a4,-36(s0)
    120c:	000037b7          	lui	a5,0x3
    1210:	3f07a783          	lw	a5,1008(a5) # 33f0 <_alloc_end>
    1214:	06f77c63          	bgeu	a4,a5,128c <page_free+0xa0>
		return;
	}
	/* get the first page descriptor of this memory block */
	struct Page *page = (struct Page *)HEAP_START;
    1218:	000027b7          	lui	a5,0x2
    121c:	cc47a783          	lw	a5,-828(a5) # 1cc4 <_text_end>
    1220:	fef42623          	sw	a5,-20(s0)
	page += ((uint32_t)p - _alloc_start)/ PAGE_SIZE;
    1224:	fdc42703          	lw	a4,-36(s0)
    1228:	000037b7          	lui	a5,0x3
    122c:	3ec7a783          	lw	a5,1004(a5) # 33ec <_alloc_start>
    1230:	40f707b3          	sub	a5,a4,a5
    1234:	00c7d793          	srli	a5,a5,0xc
    1238:	fec42703          	lw	a4,-20(s0)
    123c:	00f707b3          	add	a5,a4,a5
    1240:	fef42623          	sw	a5,-20(s0)
	/* loop and clear all the page descriptors of the memory block */
	while (!_is_free(page)) {
    1244:	0340006f          	j	1278 <page_free+0x8c>
		if (_is_last(page)) {
    1248:	fec42503          	lw	a0,-20(s0)
    124c:	c11ff0ef          	jal	ra,e5c <_is_last>
    1250:	00050793          	mv	a5,a0
    1254:	00078863          	beqz	a5,1264 <page_free+0x78>
			_clear(page);
    1258:	fec42503          	lw	a0,-20(s0)
    125c:	b59ff0ef          	jal	ra,db4 <_clear>
			break;
    1260:	0300006f          	j	1290 <page_free+0xa4>
		} else {
			_clear(page);
    1264:	fec42503          	lw	a0,-20(s0)
    1268:	b4dff0ef          	jal	ra,db4 <_clear>
			page++;;
    126c:	fec42783          	lw	a5,-20(s0)
    1270:	00178793          	addi	a5,a5,1
    1274:	fef42623          	sw	a5,-20(s0)
	while (!_is_free(page)) {
    1278:	fec42503          	lw	a0,-20(s0)
    127c:	b61ff0ef          	jal	ra,ddc <_is_free>
    1280:	00050793          	mv	a5,a0
    1284:	fc0782e3          	beqz	a5,1248 <page_free+0x5c>
    1288:	0080006f          	j	1290 <page_free+0xa4>
		return;
    128c:	00000013          	nop
		}
	}
}
    1290:	02c12083          	lw	ra,44(sp)
    1294:	02812403          	lw	s0,40(sp)
    1298:	03010113          	addi	sp,sp,48
    129c:	00008067          	ret

000012a0 <page_test>:

void page_test()
{
    12a0:	fe010113          	addi	sp,sp,-32
    12a4:	00112e23          	sw	ra,28(sp)
    12a8:	00812c23          	sw	s0,24(sp)
    12ac:	02010413          	addi	s0,sp,32
	void *p = page_alloc(2);
    12b0:	00200513          	li	a0,2
    12b4:	dcdff0ef          	jal	ra,1080 <page_alloc>
    12b8:	fea42623          	sw	a0,-20(s0)
	printf("p = 0x%x\n", p);
    12bc:	fec42583          	lw	a1,-20(s0)
    12c0:	000027b7          	lui	a5,0x2
    12c4:	e4478513          	addi	a0,a5,-444 # 1e44 <BSS_END+0x15c>
    12c8:	a3dff0ef          	jal	ra,d04 <printf>
	//page_free(p);

	void *p2 = page_alloc(7);
    12cc:	00700513          	li	a0,7
    12d0:	db1ff0ef          	jal	ra,1080 <page_alloc>
    12d4:	fea42423          	sw	a0,-24(s0)
	printf("p2 = 0x%x\n", p2);
    12d8:	fe842583          	lw	a1,-24(s0)
    12dc:	000027b7          	lui	a5,0x2
    12e0:	e5078513          	addi	a0,a5,-432 # 1e50 <BSS_END+0x168>
    12e4:	a21ff0ef          	jal	ra,d04 <printf>
	page_free(p2);
    12e8:	fe842503          	lw	a0,-24(s0)
    12ec:	f01ff0ef          	jal	ra,11ec <page_free>

	void *p3 = page_alloc(4);
    12f0:	00400513          	li	a0,4
    12f4:	d8dff0ef          	jal	ra,1080 <page_alloc>
    12f8:	fea42223          	sw	a0,-28(s0)
	printf("p3 = 0x%x\n", p3);
    12fc:	fe442583          	lw	a1,-28(s0)
    1300:	000027b7          	lui	a5,0x2
    1304:	e5c78513          	addi	a0,a5,-420 # 1e5c <BSS_END+0x174>
    1308:	9fdff0ef          	jal	ra,d04 <printf>
}
    130c:	00000013          	nop
    1310:	01c12083          	lw	ra,28(sp)
    1314:	01812403          	lw	s0,24(sp)
    1318:	02010113          	addi	sp,sp,32
    131c:	00008067          	ret

00001320 <r_mhartid>:
	return x;
}

/* which hart (core) is this? */
static inline reg_t r_mhartid()
{
    1320:	fe010113          	addi	sp,sp,-32
    1324:	00812e23          	sw	s0,28(sp)
    1328:	02010413          	addi	s0,sp,32
	reg_t x;
	asm volatile("csrr %0, mhartid" : "=r" (x) );
    132c:	f14027f3          	csrr	a5,mhartid
    1330:	fef42623          	sw	a5,-20(s0)
	return x;
    1334:	fec42783          	lw	a5,-20(s0)
}
    1338:	00078513          	mv	a0,a5
    133c:	01c12403          	lw	s0,28(sp)
    1340:	02010113          	addi	sp,sp,32
    1344:	00008067          	ret

00001348 <w_mscratch>:
	return x;
}

/* Machine Scratch register, for early trap handler */
static inline void w_mscratch(reg_t x)
{
    1348:	fe010113          	addi	sp,sp,-32
    134c:	00812e23          	sw	s0,28(sp)
    1350:	02010413          	addi	s0,sp,32
    1354:	fea42623          	sw	a0,-20(s0)
	asm volatile("csrw mscratch, %0" : : "r" (x));
    1358:	fec42783          	lw	a5,-20(s0)
    135c:	34079073          	csrw	mscratch,a5
}
    1360:	00000013          	nop
    1364:	01c12403          	lw	s0,28(sp)
    1368:	02010113          	addi	sp,sp,32
    136c:	00008067          	ret

00001370 <r_mie>:
#define MIE_MEIE (1 << 11) // external
#define MIE_MTIE (1 << 7)  // timer
#define MIE_MSIE (1 << 3)  // software

static inline reg_t r_mie()
{
    1370:	fe010113          	addi	sp,sp,-32
    1374:	00812e23          	sw	s0,28(sp)
    1378:	02010413          	addi	s0,sp,32
	reg_t x;
	asm volatile("csrr %0, mie" : "=r" (x) );
    137c:	304027f3          	csrr	a5,mie
    1380:	fef42623          	sw	a5,-20(s0)
	return x;
    1384:	fec42783          	lw	a5,-20(s0)
}
    1388:	00078513          	mv	a0,a5
    138c:	01c12403          	lw	s0,28(sp)
    1390:	02010113          	addi	sp,sp,32
    1394:	00008067          	ret

00001398 <w_mie>:

static inline void w_mie(reg_t x)
{
    1398:	fe010113          	addi	sp,sp,-32
    139c:	00812e23          	sw	s0,28(sp)
    13a0:	02010413          	addi	s0,sp,32
    13a4:	fea42623          	sw	a0,-20(s0)
	asm volatile("csrw mie, %0" : : "r" (x));
    13a8:	fec42783          	lw	a5,-20(s0)
    13ac:	30479073          	csrw	mie,a5
}
    13b0:	00000013          	nop
    13b4:	01c12403          	lw	s0,28(sp)
    13b8:	02010113          	addi	sp,sp,32
    13bc:	00008067          	ret

000013c0 <sched_init>:
 */
static int _top = 0;
static int _current = -1;

void sched_init()
{
    13c0:	ff010113          	addi	sp,sp,-16
    13c4:	00112623          	sw	ra,12(sp)
    13c8:	00812423          	sw	s0,8(sp)
    13cc:	01010413          	addi	s0,sp,16
	w_mscratch(0);
    13d0:	00000513          	li	a0,0
    13d4:	f75ff0ef          	jal	ra,1348 <w_mscratch>

	/* enable machine-mode software interrupts. */
	w_mie(r_mie() | MIE_MSIE);
    13d8:	f99ff0ef          	jal	ra,1370 <r_mie>
    13dc:	00050793          	mv	a5,a0
    13e0:	0087e793          	ori	a5,a5,8
    13e4:	00078513          	mv	a0,a5
    13e8:	fb1ff0ef          	jal	ra,1398 <w_mie>
}
    13ec:	00000013          	nop
    13f0:	00c12083          	lw	ra,12(sp)
    13f4:	00812403          	lw	s0,8(sp)
    13f8:	01010113          	addi	sp,sp,16
    13fc:	00008067          	ret

00001400 <schedule>:

/*
 * implment a simple cycle FIFO schedular
 */
void schedule()
{
    1400:	fe010113          	addi	sp,sp,-32
    1404:	00112e23          	sw	ra,28(sp)
    1408:	00812c23          	sw	s0,24(sp)
    140c:	02010413          	addi	s0,sp,32
	if (_top <= 0) {
    1410:	000067b7          	lui	a5,0x6
    1414:	0f87a783          	lw	a5,248(a5) # 60f8 <_top>
    1418:	00f04a63          	bgtz	a5,142c <schedule+0x2c>
		printf("Num of task should be greater than zero!");
    141c:	000027b7          	lui	a5,0x2
    1420:	e6878513          	addi	a0,a5,-408 # 1e68 <BSS_END+0x180>
    1424:	8e1ff0ef          	jal	ra,d04 <printf>
		return;
    1428:	0480006f          	j	1470 <schedule+0x70>
	}

	_current = (_current + 1) % _top;
    142c:	000037b7          	lui	a5,0x3
    1430:	0007a783          	lw	a5,0(a5) # 3000 <_current>
    1434:	00178713          	addi	a4,a5,1
    1438:	000067b7          	lui	a5,0x6
    143c:	0f87a783          	lw	a5,248(a5) # 60f8 <_top>
    1440:	02f76733          	rem	a4,a4,a5
    1444:	000037b7          	lui	a5,0x3
    1448:	00e7a023          	sw	a4,0(a5) # 3000 <_current>
	struct context *next = &(ctx_tasks[_current]);
    144c:	000037b7          	lui	a5,0x3
    1450:	0007a783          	lw	a5,0(a5) # 3000 <_current>
    1454:	00779713          	slli	a4,a5,0x7
    1458:	000067b7          	lui	a5,0x6
    145c:	bf878793          	addi	a5,a5,-1032 # 5bf8 <ctx_tasks>
    1460:	00f707b3          	add	a5,a4,a5
    1464:	fef42623          	sw	a5,-20(s0)
	switch_to(next);
    1468:	fec42503          	lw	a0,-20(s0)
    146c:	934ff0ef          	jal	ra,5a0 <switch_to>
}
    1470:	01c12083          	lw	ra,28(sp)
    1474:	01812403          	lw	s0,24(sp)
    1478:	02010113          	addi	sp,sp,32
    147c:	00008067          	ret

00001480 <task_create>:
 * RETURN VALUE
 * 	0: success
 * 	-1: if error occured
 */
int task_create(void (*start_routin)(void))
{
    1480:	fe010113          	addi	sp,sp,-32
    1484:	00812e23          	sw	s0,28(sp)
    1488:	02010413          	addi	s0,sp,32
    148c:	fea42623          	sw	a0,-20(s0)
	if (_top < MAX_TASKS) {
    1490:	000067b7          	lui	a5,0x6
    1494:	0f87a703          	lw	a4,248(a5) # 60f8 <_top>
    1498:	00900793          	li	a5,9
    149c:	06e7ce63          	blt	a5,a4,1518 <task_create+0x98>
		ctx_tasks[_top].sp = (reg_t) &task_stack[_top][STACK_SIZE - 1];
    14a0:	000067b7          	lui	a5,0x6
    14a4:	0f87a783          	lw	a5,248(a5) # 60f8 <_top>
    14a8:	00a79793          	slli	a5,a5,0xa
    14ac:	3ff78713          	addi	a4,a5,1023
    14b0:	000037b7          	lui	a5,0x3
    14b4:	3f878793          	addi	a5,a5,1016 # 33f8 <task_stack>
    14b8:	00f70733          	add	a4,a4,a5
    14bc:	000067b7          	lui	a5,0x6
    14c0:	0f87a783          	lw	a5,248(a5) # 60f8 <_top>
    14c4:	00070693          	mv	a3,a4
    14c8:	00006737          	lui	a4,0x6
    14cc:	bf870713          	addi	a4,a4,-1032 # 5bf8 <ctx_tasks>
    14d0:	00779793          	slli	a5,a5,0x7
    14d4:	00f707b3          	add	a5,a4,a5
    14d8:	00d7a223          	sw	a3,4(a5)
		ctx_tasks[_top].pc = (reg_t) start_routin;
    14dc:	000067b7          	lui	a5,0x6
    14e0:	0f87a783          	lw	a5,248(a5) # 60f8 <_top>
    14e4:	fec42703          	lw	a4,-20(s0)
    14e8:	000066b7          	lui	a3,0x6
    14ec:	bf868693          	addi	a3,a3,-1032 # 5bf8 <ctx_tasks>
    14f0:	00779793          	slli	a5,a5,0x7
    14f4:	00f687b3          	add	a5,a3,a5
    14f8:	06e7ae23          	sw	a4,124(a5)
		_top++;
    14fc:	000067b7          	lui	a5,0x6
    1500:	0f87a783          	lw	a5,248(a5) # 60f8 <_top>
    1504:	00178713          	addi	a4,a5,1
    1508:	000067b7          	lui	a5,0x6
    150c:	0ee7ac23          	sw	a4,248(a5) # 60f8 <_top>
		return 0;
    1510:	00000793          	li	a5,0
    1514:	0080006f          	j	151c <task_create+0x9c>
	} else {
		return -1;
    1518:	fff00793          	li	a5,-1
	}
}
    151c:	00078513          	mv	a0,a5
    1520:	01c12403          	lw	s0,28(sp)
    1524:	02010113          	addi	sp,sp,32
    1528:	00008067          	ret

0000152c <task_yield>:
 * DESCRIPTION
 * 	task_yield()  causes the calling task to relinquish the CPU and a new 
 * 	task gets to run.
 */
void task_yield()
{
    152c:	fe010113          	addi	sp,sp,-32
    1530:	00112e23          	sw	ra,28(sp)
    1534:	00812c23          	sw	s0,24(sp)
    1538:	02010413          	addi	s0,sp,32
	/* trigger a machine-level software interrupt */
	int id = r_mhartid();
    153c:	de5ff0ef          	jal	ra,1320 <r_mhartid>
    1540:	00050793          	mv	a5,a0
    1544:	fef42623          	sw	a5,-20(s0)
	*(uint32_t*)CLINT_MSIP(id) = 1;
    1548:	fec42703          	lw	a4,-20(s0)
    154c:	008007b7          	lui	a5,0x800
    1550:	00f707b3          	add	a5,a4,a5
    1554:	00279793          	slli	a5,a5,0x2
    1558:	00078713          	mv	a4,a5
    155c:	00100793          	li	a5,1
    1560:	00f72023          	sw	a5,0(a4)
}
    1564:	00000013          	nop
    1568:	01c12083          	lw	ra,28(sp)
    156c:	01812403          	lw	s0,24(sp)
    1570:	02010113          	addi	sp,sp,32
    1574:	00008067          	ret

00001578 <task_delay>:

/*
 * a very rough implementaion, just to consume the cpu
 */
void task_delay(volatile int count)
{
    1578:	fe010113          	addi	sp,sp,-32
    157c:	00812e23          	sw	s0,28(sp)
    1580:	02010413          	addi	s0,sp,32
    1584:	fea42623          	sw	a0,-20(s0)
	count *= 50000;
    1588:	fec42703          	lw	a4,-20(s0)
    158c:	0000c7b7          	lui	a5,0xc
    1590:	35078793          	addi	a5,a5,848 # c350 <_bss_end+0x6250>
    1594:	02f707b3          	mul	a5,a4,a5
    1598:	fef42623          	sw	a5,-20(s0)
	while (count--);
    159c:	00000013          	nop
    15a0:	fec42783          	lw	a5,-20(s0)
    15a4:	fff78713          	addi	a4,a5,-1
    15a8:	fee42623          	sw	a4,-20(s0)
    15ac:	fe079ae3          	bnez	a5,15a0 <task_delay+0x28>
}
    15b0:	00000013          	nop
    15b4:	00000013          	nop
    15b8:	01c12403          	lw	s0,28(sp)
    15bc:	02010113          	addi	sp,sp,32
    15c0:	00008067          	ret

000015c4 <r_mhartid>:
{
    15c4:	fe010113          	addi	sp,sp,-32
    15c8:	00812e23          	sw	s0,28(sp)
    15cc:	02010413          	addi	s0,sp,32
	asm volatile("csrr %0, mhartid" : "=r" (x) );
    15d0:	f14027f3          	csrr	a5,mhartid
    15d4:	fef42623          	sw	a5,-20(s0)
	return x;
    15d8:	fec42783          	lw	a5,-20(s0)
}
    15dc:	00078513          	mv	a0,a5
    15e0:	01c12403          	lw	s0,28(sp)
    15e4:	02010113          	addi	sp,sp,32
    15e8:	00008067          	ret

000015ec <user_task0>:
#include "user_api.h"

#define DELAY 4000

void user_task0(void)
{
    15ec:	fe010113          	addi	sp,sp,-32
    15f0:	00112e23          	sw	ra,28(sp)
    15f4:	00812c23          	sw	s0,24(sp)
    15f8:	02010413          	addi	s0,sp,32
	uart_puts("Task 0: Created!\n");
    15fc:	000027b7          	lui	a5,0x2
    1600:	e9478513          	addi	a0,a5,-364 # 1e94 <BSS_END+0x1ac>
    1604:	8e4ff0ef          	jal	ra,6e8 <uart_puts>

	unsigned int hid = -1;
    1608:	fff00793          	li	a5,-1
    160c:	fef42423          	sw	a5,-24(s0)

	/*
	 * if syscall is supported, this will trigger exception, 
	 * code = 2 (Illegal instruction)
	 */
	hid = r_mhartid();
    1610:	fb5ff0ef          	jal	ra,15c4 <r_mhartid>
    1614:	00050793          	mv	a5,a0
    1618:	fef42423          	sw	a5,-24(s0)
	printf("hart id is %d\n", hid);
    161c:	fe842783          	lw	a5,-24(s0)
    1620:	00078593          	mv	a1,a5
    1624:	000027b7          	lui	a5,0x2
    1628:	ea878513          	addi	a0,a5,-344 # 1ea8 <BSS_END+0x1c0>
    162c:	ed8ff0ef          	jal	ra,d04 <printf>

	int ret = -1;
    1630:	fff00793          	li	a5,-1
    1634:	fef42623          	sw	a5,-20(s0)
	ret = gethid(&hid);
    1638:	fe840793          	addi	a5,s0,-24
    163c:	00078513          	mv	a0,a5
    1640:	ff9fe0ef          	jal	ra,638 <gethid>
    1644:	fea42623          	sw	a0,-20(s0)
	//ret = gethid(NULL);
	if (!ret) {
    1648:	fec42783          	lw	a5,-20(s0)
    164c:	00079e63          	bnez	a5,1668 <user_task0+0x7c>
		printf("system call returned!, hart id is %d\n", hid);
    1650:	fe842783          	lw	a5,-24(s0)
    1654:	00078593          	mv	a1,a5
    1658:	000027b7          	lui	a5,0x2
    165c:	eb878513          	addi	a0,a5,-328 # 1eb8 <BSS_END+0x1d0>
    1660:	ea4ff0ef          	jal	ra,d04 <printf>
    1664:	0140006f          	j	1678 <user_task0+0x8c>
	} else {
		printf("gethid() failed, return: %d\n", ret);
    1668:	fec42583          	lw	a1,-20(s0)
    166c:	000027b7          	lui	a5,0x2
    1670:	ee078513          	addi	a0,a5,-288 # 1ee0 <BSS_END+0x1f8>
    1674:	e90ff0ef          	jal	ra,d04 <printf>
	}

	while (1){
		uart_puts("Task 0: Running... \n");
    1678:	000027b7          	lui	a5,0x2
    167c:	f0078513          	addi	a0,a5,-256 # 1f00 <BSS_END+0x218>
    1680:	868ff0ef          	jal	ra,6e8 <uart_puts>
		task_delay(DELAY);
    1684:	000017b7          	lui	a5,0x1
    1688:	fa078513          	addi	a0,a5,-96 # fa0 <page_init+0xc4>
    168c:	eedff0ef          	jal	ra,1578 <task_delay>
		uart_puts("Task 0: Running... \n");
    1690:	00000013          	nop
    1694:	fe5ff06f          	j	1678 <user_task0+0x8c>

00001698 <user_task1>:
	}
}

void user_task1(void)
{
    1698:	ff010113          	addi	sp,sp,-16
    169c:	00112623          	sw	ra,12(sp)
    16a0:	00812423          	sw	s0,8(sp)
    16a4:	01010413          	addi	s0,sp,16
	uart_puts("Task 1: Created!\n");
    16a8:	000027b7          	lui	a5,0x2
    16ac:	f1878513          	addi	a0,a5,-232 # 1f18 <BSS_END+0x230>
    16b0:	838ff0ef          	jal	ra,6e8 <uart_puts>
	while (1) {
		uart_puts("Task 1: Running... \n");
    16b4:	000027b7          	lui	a5,0x2
    16b8:	f2c78513          	addi	a0,a5,-212 # 1f2c <BSS_END+0x244>
    16bc:	82cff0ef          	jal	ra,6e8 <uart_puts>
		task_delay(DELAY);
    16c0:	000017b7          	lui	a5,0x1
    16c4:	fa078513          	addi	a0,a5,-96 # fa0 <page_init+0xc4>
    16c8:	eb1ff0ef          	jal	ra,1578 <task_delay>
		uart_puts("Task 1: Running... \n");
    16cc:	00000013          	nop
    16d0:	fe5ff06f          	j	16b4 <user_task1+0x1c>

000016d4 <os_main>:
	}
}

/* NOTICE: DON'T LOOP INFINITELY IN main() */
void os_main(void)
{
    16d4:	ff010113          	addi	sp,sp,-16
    16d8:	00112623          	sw	ra,12(sp)
    16dc:	00812423          	sw	s0,8(sp)
    16e0:	01010413          	addi	s0,sp,16
	task_create(user_task0);
    16e4:	000017b7          	lui	a5,0x1
    16e8:	5ec78513          	addi	a0,a5,1516 # 15ec <user_task0>
    16ec:	d95ff0ef          	jal	ra,1480 <task_create>
	//task_create(user_task1);
}
    16f0:	00000013          	nop
    16f4:	00c12083          	lw	ra,12(sp)
    16f8:	00812403          	lw	s0,8(sp)
    16fc:	01010113          	addi	sp,sp,16
    1700:	00008067          	ret

00001704 <r_mhartid>:
{
    1704:	fe010113          	addi	sp,sp,-32
    1708:	00812e23          	sw	s0,28(sp)
    170c:	02010413          	addi	s0,sp,32
	asm volatile("csrr %0, mhartid" : "=r" (x) );
    1710:	f14027f3          	csrr	a5,mhartid
    1714:	fef42623          	sw	a5,-20(s0)
	return x;
    1718:	fec42783          	lw	a5,-20(s0)
}
    171c:	00078513          	mv	a0,a5
    1720:	01c12403          	lw	s0,28(sp)
    1724:	02010113          	addi	sp,sp,32
    1728:	00008067          	ret

0000172c <w_mtvec>:
{
    172c:	fe010113          	addi	sp,sp,-32
    1730:	00812e23          	sw	s0,28(sp)
    1734:	02010413          	addi	s0,sp,32
    1738:	fea42623          	sw	a0,-20(s0)
	asm volatile("csrw mtvec, %0" : : "r" (x));
    173c:	fec42783          	lw	a5,-20(s0)
    1740:	30579073          	csrw	mtvec,a5
}
    1744:	00000013          	nop
    1748:	01c12403          	lw	s0,28(sp)
    174c:	02010113          	addi	sp,sp,32
    1750:	00008067          	ret

00001754 <trap_init>:
extern void timer_handler(void);
extern void schedule(void);
extern void do_syscall(struct context *cxt);

void trap_init()
{
    1754:	ff010113          	addi	sp,sp,-16
    1758:	00112623          	sw	ra,12(sp)
    175c:	00812423          	sw	s0,8(sp)
    1760:	01010413          	addi	s0,sp,16
	/*
	 * set the trap-vector base-address for machine-mode
	 */
	w_mtvec((reg_t)trap_vector);
    1764:	47000793          	li	a5,1136
    1768:	00078513          	mv	a0,a5
    176c:	fc1ff0ef          	jal	ra,172c <w_mtvec>
}
    1770:	00000013          	nop
    1774:	00c12083          	lw	ra,12(sp)
    1778:	00812403          	lw	s0,8(sp)
    177c:	01010113          	addi	sp,sp,16
    1780:	00008067          	ret

00001784 <external_interrupt_handler>:

void external_interrupt_handler()
{
    1784:	ff010113          	addi	sp,sp,-16
    1788:	00812623          	sw	s0,12(sp)
    178c:	01010413          	addi	s0,sp,16
}
    1790:	00000013          	nop
    1794:	00c12403          	lw	s0,12(sp)
    1798:	01010113          	addi	sp,sp,16
    179c:	00008067          	ret

000017a0 <trap_handler>:

reg_t trap_handler(reg_t epc, reg_t cause, struct context *cxt)
{
    17a0:	fd010113          	addi	sp,sp,-48
    17a4:	02112623          	sw	ra,44(sp)
    17a8:	02812423          	sw	s0,40(sp)
    17ac:	03010413          	addi	s0,sp,48
    17b0:	fca42e23          	sw	a0,-36(s0)
    17b4:	fcb42c23          	sw	a1,-40(s0)
    17b8:	fcc42a23          	sw	a2,-44(s0)
	reg_t return_pc = epc;
    17bc:	fdc42783          	lw	a5,-36(s0)
    17c0:	fef42623          	sw	a5,-20(s0)
	reg_t cause_code = cause & 0xfff;
    17c4:	fd842703          	lw	a4,-40(s0)
    17c8:	000017b7          	lui	a5,0x1
    17cc:	fff78793          	addi	a5,a5,-1 # fff <page_init+0x123>
    17d0:	00f777b3          	and	a5,a4,a5
    17d4:	fef42423          	sw	a5,-24(s0)
	
	if (cause & 0x80000000) {
    17d8:	fd842783          	lw	a5,-40(s0)
    17dc:	0a07d263          	bgez	a5,1880 <trap_handler+0xe0>
		/* Asynchronous trap - interrupt */
		switch (cause_code) {
    17e0:	fe842703          	lw	a4,-24(s0)
    17e4:	00b00793          	li	a5,11
    17e8:	06f70a63          	beq	a4,a5,185c <trap_handler+0xbc>
    17ec:	fe842703          	lw	a4,-24(s0)
    17f0:	00b00793          	li	a5,11
    17f4:	06e7ee63          	bltu	a5,a4,1870 <trap_handler+0xd0>
    17f8:	fe842703          	lw	a4,-24(s0)
    17fc:	00300793          	li	a5,3
    1800:	00f70a63          	beq	a4,a5,1814 <trap_handler+0x74>
    1804:	fe842703          	lw	a4,-24(s0)
    1808:	00700793          	li	a5,7
    180c:	02f70e63          	beq	a4,a5,1848 <trap_handler+0xa8>
    1810:	0600006f          	j	1870 <trap_handler+0xd0>
		case 3:
			uart_puts("software interruption!\n");
    1814:	000027b7          	lui	a5,0x2
    1818:	f4478513          	addi	a0,a5,-188 # 1f44 <BSS_END+0x25c>
    181c:	ecdfe0ef          	jal	ra,6e8 <uart_puts>
			/*
			 * acknowledge the software interrupt by clearing
    			 * the MSIP bit in mip.
			 */
			int id = r_mhartid();
    1820:	ee5ff0ef          	jal	ra,1704 <r_mhartid>
    1824:	00050793          	mv	a5,a0
    1828:	fef42223          	sw	a5,-28(s0)
    			*(uint32_t*)CLINT_MSIP(id) = 0;
    182c:	fe442703          	lw	a4,-28(s0)
    1830:	008007b7          	lui	a5,0x800
    1834:	00f707b3          	add	a5,a4,a5
    1838:	00279793          	slli	a5,a5,0x2
    183c:	0007a023          	sw	zero,0(a5) # 800000 <_memory_end+0x600000>

			schedule();
    1840:	bc1ff0ef          	jal	ra,1400 <schedule>

			break;
    1844:	0880006f          	j	18cc <trap_handler+0x12c>
		case 7:
			uart_puts("timer interruption!\n");
    1848:	000027b7          	lui	a5,0x2
    184c:	f5c78513          	addi	a0,a5,-164 # 1f5c <BSS_END+0x274>
    1850:	e99fe0ef          	jal	ra,6e8 <uart_puts>
			timer_handler();
    1854:	22c000ef          	jal	ra,1a80 <timer_handler>
			break;
    1858:	0740006f          	j	18cc <trap_handler+0x12c>
		case 11:
			uart_puts("external interruption!\n");
    185c:	000027b7          	lui	a5,0x2
    1860:	f7478513          	addi	a0,a5,-140 # 1f74 <BSS_END+0x28c>
    1864:	e85fe0ef          	jal	ra,6e8 <uart_puts>
			external_interrupt_handler();
    1868:	f1dff0ef          	jal	ra,1784 <external_interrupt_handler>
			break;
    186c:	0600006f          	j	18cc <trap_handler+0x12c>
		default:
			uart_puts("unknown async exception!\n");
    1870:	000027b7          	lui	a5,0x2
    1874:	f8c78513          	addi	a0,a5,-116 # 1f8c <BSS_END+0x2a4>
    1878:	e71fe0ef          	jal	ra,6e8 <uart_puts>
			break;
    187c:	0500006f          	j	18cc <trap_handler+0x12c>
		}
	} else {
		/* Synchronous trap - exception */
		printf("Sync exceptions!, code = %d\n", cause_code);
    1880:	fe842583          	lw	a1,-24(s0)
    1884:	000027b7          	lui	a5,0x2
    1888:	fa878513          	addi	a0,a5,-88 # 1fa8 <BSS_END+0x2c0>
    188c:	c78ff0ef          	jal	ra,d04 <printf>
		switch (cause_code) {
    1890:	fe842703          	lw	a4,-24(s0)
    1894:	00b00793          	li	a5,11
    1898:	02f71463          	bne	a4,a5,18c0 <trap_handler+0x120>
		case 11:
			uart_puts("System call from M-mode!\n");
    189c:	000027b7          	lui	a5,0x2
    18a0:	fc878513          	addi	a0,a5,-56 # 1fc8 <BSS_END+0x2e0>
    18a4:	e45fe0ef          	jal	ra,6e8 <uart_puts>
			do_syscall(cxt);
    18a8:	fd442503          	lw	a0,-44(s0)
    18ac:	398000ef          	jal	ra,1c44 <do_syscall>
			return_pc += 4;
    18b0:	fec42783          	lw	a5,-20(s0)
    18b4:	00478793          	addi	a5,a5,4
    18b8:	fef42623          	sw	a5,-20(s0)
			break;
    18bc:	0100006f          	j	18cc <trap_handler+0x12c>
		default:
			printf("OOPS! What can I do!");
    18c0:	000027b7          	lui	a5,0x2
    18c4:	fe478513          	addi	a0,a5,-28 # 1fe4 <BSS_END+0x2fc>
    18c8:	c3cff0ef          	jal	ra,d04 <printf>
			//return_pc += 4;
		}
	}

	return return_pc;
    18cc:	fec42783          	lw	a5,-20(s0)
}
    18d0:	00078513          	mv	a0,a5
    18d4:	02c12083          	lw	ra,44(sp)
    18d8:	02812403          	lw	s0,40(sp)
    18dc:	03010113          	addi	sp,sp,48
    18e0:	00008067          	ret

000018e4 <trap_test>:

void trap_test()
{
    18e4:	ff010113          	addi	sp,sp,-16
    18e8:	00112623          	sw	ra,12(sp)
    18ec:	00812423          	sw	s0,8(sp)
    18f0:	01010413          	addi	s0,sp,16
	/*
	 * Synchronous exception code = 7
	 * Store/AMO access fault
	 */
	*(int *)0x00000000 = 100;
    18f4:	00000713          	li	a4,0
    18f8:	06400793          	li	a5,100
    18fc:	00f72023          	sw	a5,0(a4)
	 * Synchronous exception code = 5
	 * Load access fault
	 */
	//int a = *(int *)0x00000000;

	uart_puts("Yeah! I'm return back from trap!\n");
    1900:	000027b7          	lui	a5,0x2
    1904:	ffc78513          	addi	a0,a5,-4 # 1ffc <BSS_END+0x314>
    1908:	de1fe0ef          	jal	ra,6e8 <uart_puts>
}
    190c:	00000013          	nop
    1910:	00c12083          	lw	ra,12(sp)
    1914:	00812403          	lw	s0,8(sp)
    1918:	01010113          	addi	sp,sp,16
    191c:	00008067          	ret

00001920 <r_mhartid>:
{
    1920:	fe010113          	addi	sp,sp,-32
    1924:	00812e23          	sw	s0,28(sp)
    1928:	02010413          	addi	s0,sp,32
	asm volatile("csrr %0, mhartid" : "=r" (x) );
    192c:	f14027f3          	csrr	a5,mhartid
    1930:	fef42623          	sw	a5,-20(s0)
	return x;
    1934:	fec42783          	lw	a5,-20(s0)
}
    1938:	00078513          	mv	a0,a5
    193c:	01c12403          	lw	s0,28(sp)
    1940:	02010113          	addi	sp,sp,32
    1944:	00008067          	ret

00001948 <r_mie>:
{
    1948:	fe010113          	addi	sp,sp,-32
    194c:	00812e23          	sw	s0,28(sp)
    1950:	02010413          	addi	s0,sp,32
	asm volatile("csrr %0, mie" : "=r" (x) );
    1954:	304027f3          	csrr	a5,mie
    1958:	fef42623          	sw	a5,-20(s0)
	return x;
    195c:	fec42783          	lw	a5,-20(s0)
}
    1960:	00078513          	mv	a0,a5
    1964:	01c12403          	lw	s0,28(sp)
    1968:	02010113          	addi	sp,sp,32
    196c:	00008067          	ret

00001970 <w_mie>:
{
    1970:	fe010113          	addi	sp,sp,-32
    1974:	00812e23          	sw	s0,28(sp)
    1978:	02010413          	addi	s0,sp,32
    197c:	fea42623          	sw	a0,-20(s0)
	asm volatile("csrw mie, %0" : : "r" (x));
    1980:	fec42783          	lw	a5,-20(s0)
    1984:	30479073          	csrw	mie,a5
}
    1988:	00000013          	nop
    198c:	01c12403          	lw	s0,28(sp)
    1990:	02010113          	addi	sp,sp,32
    1994:	00008067          	ret

00001998 <timer_load>:
static uint32_t _tick = 0;


/* load timer interval(in ticks) for next timer interrupt.*/
void timer_load(int interval)
{
    1998:	fd010113          	addi	sp,sp,-48
    199c:	02112623          	sw	ra,44(sp)
    19a0:	02812423          	sw	s0,40(sp)
    19a4:	03212223          	sw	s2,36(sp)
    19a8:	03312023          	sw	s3,32(sp)
    19ac:	03010413          	addi	s0,sp,48
    19b0:	fca42e23          	sw	a0,-36(s0)
	/* each CPU has a separate source of timer interrupts. */
	int id = r_mhartid();
    19b4:	f6dff0ef          	jal	ra,1920 <r_mhartid>
    19b8:	00050793          	mv	a5,a0
    19bc:	fef42623          	sw	a5,-20(s0)
	
	*(uint64_t*)CLINT_MTIMECMP(id) = *(uint64_t*)CLINT_MTIME + interval;
    19c0:	0200c7b7          	lui	a5,0x200c
    19c4:	ff878793          	addi	a5,a5,-8 # 200bff8 <_memory_end+0x1e0bff8>
    19c8:	0007a703          	lw	a4,0(a5)
    19cc:	0047a783          	lw	a5,4(a5)
    19d0:	fdc42683          	lw	a3,-36(s0)
    19d4:	00068913          	mv	s2,a3
    19d8:	41f6d693          	srai	a3,a3,0x1f
    19dc:	00068993          	mv	s3,a3
    19e0:	fec42603          	lw	a2,-20(s0)
    19e4:	004016b7          	lui	a3,0x401
    19e8:	80068693          	addi	a3,a3,-2048 # 400800 <_memory_end+0x200800>
    19ec:	00d606b3          	add	a3,a2,a3
    19f0:	00369693          	slli	a3,a3,0x3
    19f4:	00068513          	mv	a0,a3
    19f8:	01270633          	add	a2,a4,s2
    19fc:	00060593          	mv	a1,a2
    1a00:	00e5b5b3          	sltu	a1,a1,a4
    1a04:	013786b3          	add	a3,a5,s3
    1a08:	00d587b3          	add	a5,a1,a3
    1a0c:	00078693          	mv	a3,a5
    1a10:	00060713          	mv	a4,a2
    1a14:	00068793          	mv	a5,a3
    1a18:	00e52023          	sw	a4,0(a0)
    1a1c:	00f52223          	sw	a5,4(a0)
}
    1a20:	00000013          	nop
    1a24:	02c12083          	lw	ra,44(sp)
    1a28:	02812403          	lw	s0,40(sp)
    1a2c:	02412903          	lw	s2,36(sp)
    1a30:	02012983          	lw	s3,32(sp)
    1a34:	03010113          	addi	sp,sp,48
    1a38:	00008067          	ret

00001a3c <timer_init>:

void timer_init()
{
    1a3c:	ff010113          	addi	sp,sp,-16
    1a40:	00112623          	sw	ra,12(sp)
    1a44:	00812423          	sw	s0,8(sp)
    1a48:	01010413          	addi	s0,sp,16
	/*
	 * On reset, mtime is cleared to zero, but the mtimecmp registers 
	 * are not reset. So we have to init the mtimecmp manually.
	 */
	timer_load(TIMER_INTERVAL);
    1a4c:	009897b7          	lui	a5,0x989
    1a50:	68078513          	addi	a0,a5,1664 # 989680 <_memory_end+0x789680>
    1a54:	f45ff0ef          	jal	ra,1998 <timer_load>

	/* enable machine-mode timer interrupts. */
	w_mie(r_mie() | MIE_MTIE);
    1a58:	ef1ff0ef          	jal	ra,1948 <r_mie>
    1a5c:	00050793          	mv	a5,a0
    1a60:	0807e793          	ori	a5,a5,128
    1a64:	00078513          	mv	a0,a5
    1a68:	f09ff0ef          	jal	ra,1970 <w_mie>
}
    1a6c:	00000013          	nop
    1a70:	00c12083          	lw	ra,12(sp)
    1a74:	00812403          	lw	s0,8(sp)
    1a78:	01010113          	addi	sp,sp,16
    1a7c:	00008067          	ret

00001a80 <timer_handler>:


void timer_handler() 
{
    1a80:	ff010113          	addi	sp,sp,-16
    1a84:	00112623          	sw	ra,12(sp)
    1a88:	00812423          	sw	s0,8(sp)
    1a8c:	01010413          	addi	s0,sp,16
	_tick++;
    1a90:	000067b7          	lui	a5,0x6
    1a94:	0fc7a783          	lw	a5,252(a5) # 60fc <_tick>
    1a98:	00178713          	addi	a4,a5,1
    1a9c:	000067b7          	lui	a5,0x6
    1aa0:	0ee7ae23          	sw	a4,252(a5) # 60fc <_tick>
	printf("tick: %d\n", _tick);
    1aa4:	000067b7          	lui	a5,0x6
    1aa8:	0fc7a783          	lw	a5,252(a5) # 60fc <_tick>
    1aac:	00078593          	mv	a1,a5
    1ab0:	000027b7          	lui	a5,0x2
    1ab4:	02078513          	addi	a0,a5,32 # 2020 <BSS_END+0x338>
    1ab8:	a4cff0ef          	jal	ra,d04 <printf>

	timer_load(TIMER_INTERVAL);
    1abc:	009897b7          	lui	a5,0x989
    1ac0:	68078513          	addi	a0,a5,1664 # 989680 <_memory_end+0x789680>
    1ac4:	ed5ff0ef          	jal	ra,1998 <timer_load>

	schedule();
    1ac8:	939ff0ef          	jal	ra,1400 <schedule>
}
    1acc:	00000013          	nop
    1ad0:	00c12083          	lw	ra,12(sp)
    1ad4:	00812403          	lw	s0,8(sp)
    1ad8:	01010113          	addi	sp,sp,16
    1adc:	00008067          	ret

00001ae0 <r_mstatus>:
{
    1ae0:	fe010113          	addi	sp,sp,-32
    1ae4:	00812e23          	sw	s0,28(sp)
    1ae8:	02010413          	addi	s0,sp,32
	asm volatile("csrr %0, mstatus" : "=r" (x) );
    1aec:	300027f3          	csrr	a5,mstatus
    1af0:	fef42623          	sw	a5,-20(s0)
	return x;
    1af4:	fec42783          	lw	a5,-20(s0)
}
    1af8:	00078513          	mv	a0,a5
    1afc:	01c12403          	lw	s0,28(sp)
    1b00:	02010113          	addi	sp,sp,32
    1b04:	00008067          	ret

00001b08 <w_mstatus>:
{
    1b08:	fe010113          	addi	sp,sp,-32
    1b0c:	00812e23          	sw	s0,28(sp)
    1b10:	02010413          	addi	s0,sp,32
    1b14:	fea42623          	sw	a0,-20(s0)
	asm volatile("csrw mstatus, %0" : : "r" (x));
    1b18:	fec42783          	lw	a5,-20(s0)
    1b1c:	30079073          	csrw	mstatus,a5
}
    1b20:	00000013          	nop
    1b24:	01c12403          	lw	s0,28(sp)
    1b28:	02010113          	addi	sp,sp,32
    1b2c:	00008067          	ret

00001b30 <spin_lock>:
#include "os.h"

int spin_lock()
{
    1b30:	ff010113          	addi	sp,sp,-16
    1b34:	00112623          	sw	ra,12(sp)
    1b38:	00812423          	sw	s0,8(sp)
    1b3c:	01010413          	addi	s0,sp,16
	w_mstatus(r_mstatus() & ~MSTATUS_MIE);
    1b40:	fa1ff0ef          	jal	ra,1ae0 <r_mstatus>
    1b44:	00050793          	mv	a5,a0
    1b48:	ff77f793          	andi	a5,a5,-9
    1b4c:	00078513          	mv	a0,a5
    1b50:	fb9ff0ef          	jal	ra,1b08 <w_mstatus>
	return 0;
    1b54:	00000793          	li	a5,0
}
    1b58:	00078513          	mv	a0,a5
    1b5c:	00c12083          	lw	ra,12(sp)
    1b60:	00812403          	lw	s0,8(sp)
    1b64:	01010113          	addi	sp,sp,16
    1b68:	00008067          	ret

00001b6c <spin_unlock>:

int spin_unlock()
{
    1b6c:	ff010113          	addi	sp,sp,-16
    1b70:	00112623          	sw	ra,12(sp)
    1b74:	00812423          	sw	s0,8(sp)
    1b78:	01010413          	addi	s0,sp,16
	w_mstatus(r_mstatus() | MSTATUS_MIE);
    1b7c:	f65ff0ef          	jal	ra,1ae0 <r_mstatus>
    1b80:	00050793          	mv	a5,a0
    1b84:	0087e793          	ori	a5,a5,8
    1b88:	00078513          	mv	a0,a5
    1b8c:	f7dff0ef          	jal	ra,1b08 <w_mstatus>
	return 0;
    1b90:	00000793          	li	a5,0
}
    1b94:	00078513          	mv	a0,a5
    1b98:	00c12083          	lw	ra,12(sp)
    1b9c:	00812403          	lw	s0,8(sp)
    1ba0:	01010113          	addi	sp,sp,16
    1ba4:	00008067          	ret

00001ba8 <r_mhartid>:
{
    1ba8:	fe010113          	addi	sp,sp,-32
    1bac:	00812e23          	sw	s0,28(sp)
    1bb0:	02010413          	addi	s0,sp,32
	asm volatile("csrr %0, mhartid" : "=r" (x) );
    1bb4:	f14027f3          	csrr	a5,mhartid
    1bb8:	fef42623          	sw	a5,-20(s0)
	return x;
    1bbc:	fec42783          	lw	a5,-20(s0)
}
    1bc0:	00078513          	mv	a0,a5
    1bc4:	01c12403          	lw	s0,28(sp)
    1bc8:	02010113          	addi	sp,sp,32
    1bcc:	00008067          	ret

00001bd0 <sys_gethid>:
#include "os.h"
#include "syscall.h"

int sys_gethid(unsigned int *ptr_hid)
{
    1bd0:	fe010113          	addi	sp,sp,-32
    1bd4:	00112e23          	sw	ra,28(sp)
    1bd8:	00812c23          	sw	s0,24(sp)
    1bdc:	02010413          	addi	s0,sp,32
    1be0:	fea42623          	sw	a0,-20(s0)
	printf("--> sys_gethid, arg0 = 0x%x\n", ptr_hid);
    1be4:	fec42583          	lw	a1,-20(s0)
    1be8:	000027b7          	lui	a5,0x2
    1bec:	02c78513          	addi	a0,a5,44 # 202c <BSS_END+0x344>
    1bf0:	914ff0ef          	jal	ra,d04 <printf>
	if (ptr_hid == NULL) {
    1bf4:	fec42783          	lw	a5,-20(s0)
    1bf8:	00079663          	bnez	a5,1c04 <sys_gethid+0x34>
		return -1;
    1bfc:	fff00793          	li	a5,-1
    1c00:	0300006f          	j	1c30 <sys_gethid+0x60>
	} else {
		*ptr_hid = r_mhartid();
    1c04:	fa5ff0ef          	jal	ra,1ba8 <r_mhartid>
    1c08:	00050713          	mv	a4,a0
    1c0c:	fec42783          	lw	a5,-20(s0)
    1c10:	00e7a023          	sw	a4,0(a5)
		printf("harID=%d\n", *ptr_hid);
    1c14:	fec42783          	lw	a5,-20(s0)
    1c18:	0007a783          	lw	a5,0(a5)
    1c1c:	00078593          	mv	a1,a5
    1c20:	000027b7          	lui	a5,0x2
    1c24:	04c78513          	addi	a0,a5,76 # 204c <BSS_END+0x364>
    1c28:	8dcff0ef          	jal	ra,d04 <printf>
		return 0;
    1c2c:	00000793          	li	a5,0
	}
}
    1c30:	00078513          	mv	a0,a5
    1c34:	01c12083          	lw	ra,28(sp)
    1c38:	01812403          	lw	s0,24(sp)
    1c3c:	02010113          	addi	sp,sp,32
    1c40:	00008067          	ret

00001c44 <do_syscall>:

void do_syscall(struct context *cxt)
{
    1c44:	fd010113          	addi	sp,sp,-48
    1c48:	02112623          	sw	ra,44(sp)
    1c4c:	02812423          	sw	s0,40(sp)
    1c50:	03010413          	addi	s0,sp,48
    1c54:	fca42e23          	sw	a0,-36(s0)
	uint32_t syscall_num = cxt->a7;
    1c58:	fdc42783          	lw	a5,-36(s0)
    1c5c:	0407a783          	lw	a5,64(a5)
    1c60:	fef42623          	sw	a5,-20(s0)

	switch (syscall_num) {
    1c64:	fec42703          	lw	a4,-20(s0)
    1c68:	00100793          	li	a5,1
    1c6c:	02f71463          	bne	a4,a5,1c94 <do_syscall+0x50>
	case SYS_gethid:
		cxt->a0 = sys_gethid((unsigned int *)(cxt->a0));
    1c70:	fdc42783          	lw	a5,-36(s0)
    1c74:	0247a783          	lw	a5,36(a5)
    1c78:	00078513          	mv	a0,a5
    1c7c:	f55ff0ef          	jal	ra,1bd0 <sys_gethid>
    1c80:	00050793          	mv	a5,a0
    1c84:	00078713          	mv	a4,a5
    1c88:	fdc42783          	lw	a5,-36(s0)
    1c8c:	02e7a223          	sw	a4,36(a5)
		break;
    1c90:	0200006f          	j	1cb0 <do_syscall+0x6c>
	default:
		printf("Unknown syscall no: %d\n", syscall_num);
    1c94:	fec42583          	lw	a1,-20(s0)
    1c98:	000027b7          	lui	a5,0x2
    1c9c:	05878513          	addi	a0,a5,88 # 2058 <BSS_END+0x370>
    1ca0:	864ff0ef          	jal	ra,d04 <printf>
		cxt->a0 = -1;
    1ca4:	fdc42783          	lw	a5,-36(s0)
    1ca8:	fff00713          	li	a4,-1
    1cac:	02e7a223          	sw	a4,36(a5)
	}

	return;
    1cb0:	00000013          	nop
    1cb4:	02c12083          	lw	ra,44(sp)
    1cb8:	02812403          	lw	s0,40(sp)
    1cbc:	03010113          	addi	sp,sp,48
    1cc0:	00008067          	ret
